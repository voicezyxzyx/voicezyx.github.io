<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>voicezyx&#39;s Blog</title>
  
  <subtitle>大道至简，知易行难，知行合一</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://voicezyx.top/"/>
  <updated>2019-08-29T01:38:04.574Z</updated>
  <id>http://voicezyx.top/</id>
  
  <author>
    <name>voicezyx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sql基本知识与函数学习</title>
    <link href="http://voicezyx.top/sql%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%B8%8E%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0.html"/>
    <id>http://voicezyx.top/sql基本知识与函数学习.html</id>
    <published>2019-08-29T01:36:11.810Z</published>
    <updated>2019-08-29T01:38:04.574Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、创建表"><a href="#1、创建表" class="headerlink" title="1、创建表"></a>1、创建表</h3><p>create table student<br>(<br>    ID INT PRIMARY KEY NOT NULL,<br>    NAME VARCHAR(10) NOT NULL,<br>    AGE INT NOT NULL<br>)</p><h3 id="2、修改表"><a href="#2、修改表" class="headerlink" title="2、修改表/"></a>2、修改表/</h3><p>alter table dbo.userinfo<br>alter column username varchar(100)</p><p>alter table dbo.userinfo<br>alter column age float</p><p>alter table dbo.userinfo<br>alter column username float not null</p><p>alter table dbo.userinfo<br>add constraint KID primary key (ID)</p><p>update dbo.userinfo set ID=5 where ID=4</p><p>delete dbo.userinfo where ID=5</p><p>/<em>增加一个grade字段</em>/<br>alter table dbo.userinfo<br>add grade varchar (10) not null</p><h3 id="3、删除表"><a href="#3、删除表" class="headerlink" title="3、删除表"></a>3、删除表</h3><p>drop table userinfo</p><p>create table userinfo<br>(<br>    ID int primary key not null,<br>    username varchar(10) not null,<br>    age int not null<br>)</p><h3 id="4、向表中插入多个数据"><a href="#4、向表中插入多个数据" class="headerlink" title="4、向表中插入多个数据"></a>4、向表中插入多个数据</h3><p>insert into “userinfo”<br>(“ID”,”username”,”age”)<br>values<br>(3,’asc’,33),<br>(4,’nvs’,23)</p><h3 id="5、查询出不重复的数据"><a href="#5、查询出不重复的数据" class="headerlink" title="5、查询出不重复的数据"></a>5、查询出不重复的数据</h3><p>select distinct ID FROM userinfo </p><h3 id="6、常用函数介绍"><a href="#6、常用函数介绍" class="headerlink" title="6、常用函数介绍"></a>6、常用函数介绍</h3><h4 id="6-1、top函数"><a href="#6-1、top函数" class="headerlink" title="6.1、top函数"></a>6.1、top函数</h4><h4 id="查询在前多少个的数据"><a href="#查询在前多少个的数据" class="headerlink" title="查询在前多少个的数据"></a>查询在前多少个的数据</h4><p>select top 50 * FROM userinfo </p><h4 id="6-2、IN-函数"><a href="#6-2、IN-函数" class="headerlink" title="6.2、IN()函数"></a>6.2、IN()函数</h4><h4 id="查询符合IN括号里边范围的数据"><a href="#查询符合IN括号里边范围的数据" class="headerlink" title="查询符合IN括号里边范围的数据"></a>查询符合IN括号里边范围的数据</h4><p>select * from dbo.userinfo where ID IN(2,3,5)</p><h4 id="6-3、Exists-函数"><a href="#6-3、Exists-函数" class="headerlink" title="6.3、Exists()函数"></a>6.3、Exists()函数</h4><p>联合查询<br>SELECT ID,USERNAME,AGE FROM  dbo.userinfo AS A<br>WHERE  EXISTS (SELECT * FROM dbo.MovieDBs as b WHERE A.ID=b.ID)</p><h4 id="6-4、order-by"><a href="#6-4、order-by" class="headerlink" title="6.4、order by"></a>6.4、order by</h4><p><em>排序 asc是升序，不输入默认为升序，desc为降序</em>/<br>select * from dbo.userinfo order by ID desc</p><h4 id="6-5、avg"><a href="#6-5、avg" class="headerlink" title="6.5、avg()"></a>6.5、avg()</h4><p>查询平均值</p><p>select avg(age) from dbo.userinfo</p><h4 id="6-6、sum"><a href="#6-6、sum" class="headerlink" title="6.6、sum()"></a>6.6、sum()</h4><p>查询和<br>select sum(age) from dbo.userinfo</p><h4 id="6-7、将字段进行连接"><a href="#6-7、将字段进行连接" class="headerlink" title="6.7、将字段进行连接"></a>6.7、将字段进行连接</h4><p>select grade+’_’+class from dbo.userinfo </p><h4 id="6-8、datalength"><a href="#6-8、datalength" class="headerlink" title="6.8、datalength()"></a>6.8、datalength()</h4><p>查询数据的长度<br>select datalength(username) from dbo.userinfo</p><h4 id="6-9、floor（）函数、celing（）函数"><a href="#6-9、floor（）函数、celing（）函数" class="headerlink" title="6.9、floor（）函数、celing（）函数"></a>6.9、floor（）函数、celing（）函数</h4><p>floor()函数 向下取整 celling（）函数 向上取整  rand()函数  输出一个0-1之间的随机小数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select floor(RAND()100)</span><br><span class="line">select ceiling(RAND()100)</span><br></pre></td></tr></table></figure><h4 id="6-10、GETDATE-GETUTCDATE"><a href="#6-10、GETDATE-GETUTCDATE" class="headerlink" title="6.10、GETDATE() GETUTCDATE()"></a>6.10、GETDATE() GETUTCDATE()</h4><p>/返回当前数据库系统时间，返回值的类型是datetime/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select GETDATE()</span><br></pre></td></tr></table></figure><p>/返回当前国际标准时间值，返回值的类型是datetime/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select GETUTCDATE()</span><br></pre></td></tr></table></figure><p>/Convert函数  把日期转换为新的显示类型 /</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONVERT(VARCHAR(10),GETDATE(),111)</span><br></pre></td></tr></table></figure><h4 id="6-11、datediff-函数"><a href="#6-11、datediff-函数" class="headerlink" title="6.11、datediff()函数"></a>6.11、datediff()函数</h4><p>返回两个日期之间的天数/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select DATEDIFF(DAY,&apos;2017-10-1&apos;,&apos;2018-10-3&apos;)</span><br><span class="line">select DATEDIFF(MONTH,&apos;2017-10-1&apos;,&apos;2018-10-3&apos;)</span><br></pre></td></tr></table></figure><p>/在指定时间基础上增减时间，返回增减后的新时间/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select DATEADD(DAY,5,&apos;2019-5-1&apos;)  /在2019年5月1日基础上加上五天/</span><br><span class="line">select DATEADD(MINUTE,30,&apos;2019-5-1 12:00:00&apos;)  /在2019年5月1日 12:00:00基础上加上30分钟/</span><br></pre></td></tr></table></figure><h4 id="6-12、DATEPART-函数-DATENAME-函数"><a href="#6-12、DATEPART-函数-DATENAME-函数" class="headerlink" title="6.12、DATEPART()函数  DATENAME 函数"></a>6.12、DATEPART()函数  DATENAME 函数</h4><p>用于返回日期、时间的单独部分，比如年、月、日、小时、分钟等，返回值是int整形</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select DATEPART(YEAR,GETDATE())  /返回系统当前时间中的年份数字/</span><br><span class="line">select DATEPART(MONTH,GETDATE())  /返回系统当前时间中的月份数字/</span><br><span class="line">select DATEPART(DAY,GETDATE())</span><br></pre></td></tr></table></figure><p>DATENAME 函数 </p><p>用于返回日期、时间的单独部分，返回数类型是varchar类型/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select DATENAME(MINUTE,GETDATE()) /返回当前系统时间的分钟数/</span><br></pre></td></tr></table></figure><h4 id="6-13、charindex-函数"><a href="#6-13、charindex-函数" class="headerlink" title="6.13、charindex()函数"></a>6.13、charindex()函数</h4><p>查找字符串中有没有指定的字符，返回查找到的下标/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select CHARINDEX(&apos;cc&apos;,&apos;aabbccdd&apos;)  /返回5/</span><br><span class="line">select CHARINDEX(&apos;cc&apos;,&apos;aabbccdd&apos;,6) /6表示从第6位开始查找，此查询返回0，表示没有查到/</span><br></pre></td></tr></table></figure><h4 id="6-14、stuff-函数"><a href="#6-14、stuff-函数" class="headerlink" title="6.14、stuff()函数"></a>6.14、stuff()函数</h4><p>用于删除指定长度的字符，病可以在指定的起点处插入另一组字符，返回类型是一个字符串型/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/select STUFF(列名，开始位置，长度，替代字符串)/</span><br><span class="line">select STUFF(&apos;aabbccdd&apos;,5,2,&apos;&apos;) /使用空字符替换cc的位置/</span><br></pre></td></tr></table></figure><h4 id="6-15、SUBSTRING-函数-LEFT-函数-RIGHT-函数-LTRIM-函数-RTRIM-函数"><a href="#6-15、SUBSTRING-函数-LEFT-函数-RIGHT-函数-LTRIM-函数-RTRIM-函数" class="headerlink" title="6.15、SUBSTRING()函数  LEFT()函数  RIGHT()函数 LTRIM()函数  RTRIM()函数"></a>6.15、SUBSTRING()函数  LEFT()函数  RIGHT()函数 LTRIM()函数  RTRIM()函数</h4><p>截取指定长度的字符串/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/SUBSTRING(exprsssion,start,length)/</span><br><span class="line">select SUBSTRING(&apos;ASDADJLAKSDKLAS&apos;,3,6)/从字符串第三位开始截取，截取6位，然后返回结果/</span><br></pre></td></tr></table></figure><p>/LEFT()函数 返回字符串汇中从左边开始指定个数的字符<br>RIGHT()函数 返回字符串冲右边开始指定个数的字符/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select LEFT(&apos;ASAHSDKJAS&apos;,6)/从最左边开始，然后返回6位/</span><br><span class="line">select RIGHT(&apos;ASAHSDKJAS&apos;,6)/从最右边开始，然后返回最后6位/</span><br></pre></td></tr></table></figure><p>/LTRIM()函数 删除字符串左边的空格后返回<br>RTRIM()函数 删除字符串右边的空格后返回/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select LTRIM(&apos;  SAJ  JKJASD   &apos;)</span><br><span class="line">select RTRIM(&apos;  SAJJKJASD   &apos;)</span><br></pre></td></tr></table></figure><h4 id="6-16、UPPER-函数-LOWER-函数"><a href="#6-16、UPPER-函数-LOWER-函数" class="headerlink" title="6.16、UPPER()函数    LOWER()函数"></a>6.16、UPPER()函数    LOWER()函数</h4><p>/UPPER()函数   将小写字符数据转化为大写的<br>LOWER()函数   将大写字符数据转换为小写/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select UPPER(&apos;asjCLAKSlcak&apos;)</span><br><span class="line">select LOWER(&apos;ashADHAJASXAAXLKAcan&apos;)</span><br></pre></td></tr></table></figure><h4 id="6-17、REPLACE-函数-REPLICATE-函数"><a href="#6-17、REPLACE-函数-REPLICATE-函数" class="headerlink" title="6.17、REPLACE()函数   REPLICATE()函数"></a>6.17、REPLACE()函数   REPLICATE()函数</h4><p>用另一个字符串值替换出现的所有字符串值/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select REPLACE(&apos;asdasddavsj&apos;,&apos;das&apos;,&apos;zzzz&apos;) /第一个字符串是整个字符串，第二个是要替换的字符串，第三个是准备替换成的字符串/</span><br></pre></td></tr></table></figure><p>/REPLICATE()函数 指定字符串输出指定次数/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select REPLICATE(&apos;ABC&apos;,5)</span><br></pre></td></tr></table></figure><h4 id="6-18、REVERSE-函数"><a href="#6-18、REVERSE-函数" class="headerlink" title="6.18、REVERSE()函数"></a>6.18、REVERSE()函数</h4><p>用于倒置字符串中的字符,即倒序输出/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select REVERSE(&apos;abcdefg&apos;)</span><br></pre></td></tr></table></figure><h4 id="6-19、CAST-函数"><a href="#6-19、CAST-函数" class="headerlink" title="6.19、CAST()函数"></a>6.19、CAST()函数</h4><p>用于将某种数据类型的表达式显式的转换为另一种数据类型/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select CAST(&apos;1234&apos; as varchar)</span><br><span class="line">select &apos;abc&apos;+CAST(&apos;1234&apos; as varchar) /把1234转换为字符串类型就可以与‘abc进行连接’/</span><br></pre></td></tr></table></figure><p>/CASE()函数 有两种格式，一个是简单case（）函数，一种是case（）搜索函数/<br>/简单case函数/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select , case sex when &apos;男&apos; then &apos;man&apos; when &apos;女&apos; then &apos;women&apos; end from userinfo</span><br></pre></td></tr></table></figure><p>case搜索函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select , </span><br><span class="line">case </span><br><span class="line">when score&gt;90 then &apos;优&apos; </span><br><span class="line">when score&gt;80 and score&lt;90 then &apos;良&apos;</span><br><span class="line">when score&gt;70 and score&lt;80 then &apos;中&apos;</span><br><span class="line">when score&lt;60 then &apos;差&apos; end</span><br><span class="line">from stu.score;</span><br></pre></td></tr></table></figure><h3 id="7、视图"><a href="#7、视图" class="headerlink" title="7、视图"></a>7、视图</h3><pre><code>视图是被存储在数据库中的预写查询。视图是由一个SELECT语句，运行视图后，会看到一个视图可以将多个表的数据汇总在一起并将显示，就好像它是一个单一的表。</code></pre><p>视图是永远不会自己消失的除非你删除它。<br>视图有时会对提高效率有帮助。临时表几乎是不会对性能有帮助，是资源消耗者。<br>视图一般随该数据库存放在一起，临时表永远都是在tempdb里的。</p><p>视图适合于多表连接浏览时使用。不适合增、删、改。存储过程适合于使用较频繁的SQL语句，这样可以提高执行效率!</p><h4 id="7、1、视图和表的区别和联系"><a href="#7、1、视图和表的区别和联系" class="headerlink" title="7、1、视图和表的区别和联系"></a>7、1、视图和表的区别和联系</h4><h5 id="7-1-1、区别"><a href="#7-1-1、区别" class="headerlink" title="7.1.1、区别"></a>7.1.1、区别</h5><p>（1）视图没有实际的物理记录，而表有。<br>（2）表中存储的是内容，视图是显示窗口。<br>（3）视图只是逻辑概念的存在，表可以及时对它进行修改，但视图只能有创建的语句来修改。<br>（4）表是内模式，视图是外模式。<br>（5）视图是查看数据表的一种方法，可以查询数据表中某些字段构成的数据，只是一些SQL语句的集合。从安全的角度说，视图可以不给用户接触数据表，从而不知道表结构。<br>（6）视图的建立和删除只影响视图本身，不影响对应的基本表。<br>（7）不能对视图进行update或者insert into操作。</p><h5 id="7-1-2、联系"><a href="#7-1-2、联系" class="headerlink" title="7.1.2、联系"></a>7.1.2、联系</h5><p>视图（view）是在基本表之上建立的表，它的结构（即所定义的列）和内容（即所有数据行）都来自基本表，它依据基本表存在而存在。<br>一个视图可以对应一个基本表，也可以对应多个基本表。视图是基本表的抽象和在逻辑意义上建立的新关系。</p><h4 id="7-2、创建视图"><a href="#7-2、创建视图" class="headerlink" title="7.2、创建视图"></a>7.2、创建视图</h4><p>例、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW CUSTOMERS_VIEW AS</span><br><span class="line">SELECT name, age</span><br><span class="line">FROM  CUSTOMERS</span><br><span class="line">WHERE age IS NOT NULL</span><br></pre></td></tr></table></figure><h4 id="7-3、更新视图"><a href="#7-3、更新视图" class="headerlink" title="7.3、更新视图"></a>7.3、更新视图</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE CUSTOMERS_VIEW</span><br><span class="line">      SET AGE = 35</span><br><span class="line">      WHERE name=&apos;Ramesh&apos;;</span><br></pre></td></tr></table></figure><h4 id="7-4、删除视图中的某条数据"><a href="#7-4、删除视图中的某条数据" class="headerlink" title="7.4、删除视图中的某条数据"></a>7.4、删除视图中的某条数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM CUSTOMERS_VIEW</span><br><span class="line">      WHERE age = 22;</span><br></pre></td></tr></table></figure><h4 id="7-5、删除视图"><a href="#7-5、删除视图" class="headerlink" title="7.5、删除视图"></a>7.5、删除视图</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW view_name;</span><br></pre></td></tr></table></figure><p>view_name 表示之前创建视图的名字。</p><script>(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';    }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="SQL" scheme="http://voicezyx.top/categories/SQL/"/>
    
    
      <category term="SQL" scheme="http://voicezyx.top/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>在局域网中查看Django开发的网站</title>
    <link href="http://voicezyx.top/%E5%9C%A8%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%AD%E6%9F%A5%E7%9C%8BDjango%E5%BC%80%E5%8F%91%E7%9A%84%E7%BD%91%E7%AB%99.html"/>
    <id>http://voicezyx.top/在局域网中查看Django开发的网站.html</id>
    <published>2019-08-20T09:40:54.590Z</published>
    <updated>2019-08-20T09:42:47.300Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Django是开发网站与信息系统的利器，可以通过局域网查看，也可以部署到服务器绑定域名通过外网查看，这次先实现项目通过局域网查看。</p><p>步骤：</p><p>1.在项目的settings.py文件中，找到ALLOWED_HOSTS=[ ]，在中括号中加入你电脑所在局域网中的IP。我的IP为192.168.0.100，所以设置如图所示：</p><p><img src="https://img-blog.csdnimg.cn/201908201729404.png" alt="img"></p><p>2.指令：python manage.py runserver 192.168.0.100:8000</p><p>这样就可以让局域网中的电脑访问了，我的主机地址是192.168.0.100，所以在浏览器中输入<a href="http://192.168.0.100:8000" target="_blank" rel="noopener">http://192.168.0.100:8000</a> 就可以访问了。</p><p>3、这样设置了局域网访问后，手机连着相同的局域网，在浏览器输入指定的IP和端口，也可以进行访问。</p><p>4、如果局域网不能访问，则尝试关闭电脑防火墙。</p><p>原文链接：<a href="https://blog.csdn.net/yangmingqian/article/details/54691598" target="_blank" rel="noopener">https://blog.csdn.net/yangmingqian/article/details/54691598</a></p><script> (function(){     var bp = document.createElement('script');     var curProtocol = window.location.protocol.split(':')[0];     if (curProtocol === 'https'){    bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';   }   else{   bp.src = 'http://push.zhanzhang.baidu.com/push.js';   }     var s = document.getElementsByTagName("script")[0];     s.parentNode.insertBefore(bp, s); })(); </script> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Django" scheme="http://voicezyx.top/categories/Django/"/>
    
    
      <category term="Django" scheme="http://voicezyx.top/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Git简单的基本操作</title>
    <link href="http://voicezyx.top/Git%E7%AE%80%E5%8D%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html"/>
    <id>http://voicezyx.top/Git简单的基本操作.html</id>
    <published>2019-08-09T10:44:50.484Z</published>
    <updated>2019-08-09T10:47:40.615Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>初始化仓库 git init</li><li>添加文件 git add readme.txt</li><li>提交文件 git commit -m “xxxxxxx”(xxxxxx表示提交的说明文字)</li><li>查看当前结果状态  git status</li><li>查看修改前后的不同之处  git diff</li><li>查看操作历史记录  git log</li><li>回退到之前的版本  git reset –hard ‘填写之前的版本号’ 如：$ git reset –hard 1094a</li><li>查看文件内容(cat) 如：cat readme.txt</li><li>如果想回退之前的版本，但是之前的版本id忘记了，可以用git reflog查看之前的每一次命令，从而查看想回退到版本的id</li><li>场景1：当改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 git checkout – file。</li><li>场景2：当不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 git reset HEAD <file>，就回到了场景1，第二步按场景1操作。</file></li><li>删除文件 rm test.txt<ul><li>如确实需要从版本库中删除该文件，就用git rm 删除然后使用git commit 提交</li><li>如果是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：$ git checkout – test.txt</li></ul></li><li>创建分支与合并分支<ul><li>查看分支 git branch</li><li>$ git checkout -b dev 表示创建并切换，相当于以下两条命令：1、$ git branch dev 2、$ git checkout dev</li><li>git merge dev 合并分支 ——-在master下执行此命令是将dev下的工作结果合并到master分支上。</li><li>切换分支：git checkout <name></name></li><li>删除分支 git branch -d <name></name></li></ul></li><li>解决提交冲突<ul><li>当Git无法自动合并分支时，要先解决冲突，再提交，可以通过git log 查看记录日志，然后进行修改。</li></ul></li><li>Bug分支，暂存工作区，修复bug后恢复工作区<ul><li>git stash  暂存工作区</li><li>修复完其他问题后，使用git stash list  查看暂存的工作，然后可以采用git stash pop 来恢复工作区，如果中途暂存有好几个工作区，可以使用  git stash apply stash@｛？｝，这样就还可以恢复到指定工作现场。</li></ul></li><li>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</li><li>标签（tag）<ul><li><code>git tag &lt;name&gt;</code>就可以打一个新标签</li><li>git tag 查看所有标签</li><li>要给之前commit提交的打上标签，就可以输入对应的commit id就可以，如：git tag v1.0 f52c633</li><li>标签不是按照时间顺序排的，是按照字母顺序排的。</li><li>可以用<code>git show &lt;tagname&gt;</code>查看标签信</li><li>还可以创建带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字： $ git tag -a v0.1 -m “version 0.1 released” 1094adb </li><li><code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</li><li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li><li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li><li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</li></ul></li></ul><script> (function(){     var bp = document.createElement('script');     var curProtocol = window.location.protocol.split(':')[0];     if (curProtocol === 'https'){    bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';   }   else{   bp.src = 'http://push.zhanzhang.baidu.com/push.js';   }     var s = document.getElementsByTagName("script")[0];     s.parentNode.insertBefore(bp, s); })(); </script> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Git" scheme="http://voicezyx.top/categories/Git/"/>
    
    
      <category term="git" scheme="http://voicezyx.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Java实现排序算法（冒泡排序、选择排序、插入排序、二分查找排序）</title>
    <link href="http://voicezyx.top/Java%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E3%80%81%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E3%80%81%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E3%80%81%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%8E%92%E5%BA%8F%EF%BC%89.html"/>
    <id>http://voicezyx.top/Java实现排序算法（冒泡排序、选择排序、插入排序、二分查找排序）.html</id>
    <published>2018-12-21T07:13:27.807Z</published>
    <updated>2018-12-21T07:13:27.985Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//冒泡排序</span><br><span class="line">package 排序算法;</span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int[] nums=&#123;34,4,56,17,90,65&#125;;</span><br><span class="line">for(int i=0;i&lt;nums.length-1;i++)&#123;</span><br><span class="line">for(int j=0;j&lt;nums.length-1-i;j++)&#123;  //比较轮数等于数列的长度-1</span><br><span class="line">if(nums[j]&gt;nums[j+1])&#123;</span><br><span class="line">nums[j]=nums[j]+nums[j+1];</span><br><span class="line">nums[j+1]=nums[j]-nums[j+1];</span><br><span class="line">nums[j]=nums[j]-nums[j+1];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for (int x:nums)&#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、选择排序"><a href="#2、选择排序" class="headerlink" title="2、选择排序"></a>2、选择排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//选择排序算法</span><br><span class="line">package 排序算法;</span><br><span class="line">public class Test2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int[] nums=&#123;34,4,56,17,90,65&#125;;</span><br><span class="line">int minIndex=0;//用来记录每次比较的最小值下标</span><br><span class="line">for (int i=0;i&lt;nums.length;i++)&#123;</span><br><span class="line">minIndex=i;  //每轮假设一个最小值下标</span><br><span class="line">for(int j=i+1;j&lt;nums.length;j++)&#123;</span><br><span class="line">if(nums[minIndex]&gt;nums[j])&#123;</span><br><span class="line">minIndex=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//判断需要交换的数下标是否为自己</span><br><span class="line">if (minIndex!=i)&#123;</span><br><span class="line">nums[minIndex]=nums[minIndex]+nums[i];</span><br><span class="line">nums[i]=nums[minIndex]-nums[i];</span><br><span class="line">nums[minIndex]=nums[minIndex]-nums[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for (int n:nums)&#123;</span><br><span class="line">System.out.println(n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、插入排序"><a href="#3、插入排序" class="headerlink" title="3、插入排序"></a>3、插入排序</h3><pre><code>//插入排序算法package 排序算法;public class Test3 {    public static void main(String[] args){    int[] nums={34,4,56,17,90,65};    for (int i=1;i&lt;nums.length;i++){        int temp=nums[i];        int j=0;        for(j=i-1;j&gt;=0;j--){            if (nums[j]&gt;temp){                nums[j+1]=nums[j];            }else {                break;            }        }        if (nums[j+1]!=temp){            nums[j+1]=temp;        }    }    for (int x:nums){        System.out.println(x);    }}</code></pre><p>}</p><h3 id="4、二分查找排序"><a href="#4、二分查找排序" class="headerlink" title="4、二分查找排序"></a>4、二分查找排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package 排序算法;</span><br><span class="line">import java.util.*;</span><br><span class="line">public class Test4&#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">int[] num=&#123;10,20,50,65,86,90&#125;;</span><br><span class="line">int index=Arrays.binarySearch(num, 10);</span><br><span class="line">System.out.println(&quot;找到的数字下标是：&quot;+index);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//二分查找算法（折半查找）</span><br><span class="line">package 排序算法;</span><br><span class="line">import java.util.Scanner;;</span><br><span class="line">public class Test4 &#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">//必须保证数列是有序的</span><br><span class="line">int[] num = &#123;10,20,50,65,86,90&#125;;</span><br><span class="line">int index=binarySearch(num, 22);</span><br><span class="line">System.out.println(index);</span><br><span class="line">&#125;</span><br><span class="line">//二分查找</span><br><span class="line">public static int binarySearch(int[] num,int key)&#123;</span><br><span class="line">int start=0; //开始下标</span><br><span class="line">int end=num.length-1;  //结束下标</span><br><span class="line">while(start&lt;=end)&#123;</span><br><span class="line">int mid=(start+end)/2;</span><br><span class="line"></span><br><span class="line">if(num[mid]&gt;key)&#123;</span><br><span class="line">end=mid-1;</span><br><span class="line">&#125;else if (num[mid]&lt;key) &#123;</span><br><span class="line">start=mid+1;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">return mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script> (function(){     var bp = document.createElement('script');     var curProtocol = window.location.protocol.split(':')[0];     if (curProtocol === 'https'){    bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';   }   else{   bp.src = 'http://push.zhanzhang.baidu.com/push.js';   }     var s = document.getElementsByTagName("script")[0];     s.parentNode.insertBefore(bp, s); })(); </script> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="http://voicezyx.top/categories/Java/"/>
    
    
      <category term="数组排序" scheme="http://voicezyx.top/tags/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>hexo添加点击爆炸效果 duang duang duang</title>
    <link href="http://voicezyx.top/hexo%E6%B7%BB%E5%8A%A0%E7%82%B9%E5%87%BB%E7%88%86%E7%82%B8%E6%95%88%E6%9E%9C.html"/>
    <id>http://voicezyx.top/hexo添加点击爆炸效果.html</id>
    <published>2018-09-16T07:12:40.346Z</published>
    <updated>2018-09-17T07:20:27.450Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>首先在<code>themes/next/source/js/src</code>里面建一个叫fireworks.js的文件，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;;</span><br></pre></td></tr></table></figure><p>打开<code>themes/next/layout/_layout.swig</code>,在<code>&lt;/body&gt;</code>上面写下如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.fireworks %&#125;</span><br><span class="line">   &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; </span><br><span class="line">   &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; </span><br><span class="line">   &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/fireworks.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>打开主题配置文件，在里面最后写下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Fireworks</span><br><span class="line">fireworks: true</span><br></pre></td></tr></table></figure><p>作者：Moorez 链接：<a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">https://www.jianshu.com/p/f054333ac9e6</a> 來源：简书</p><script> (function(){     var bp = document.createElement('script');     var curProtocol = window.location.protocol.split(':')[0];     if (curProtocol === 'https'){    bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';   }   else{   bp.src = 'http://push.zhanzhang.baidu.com/push.js';   }     var s = document.getElementsByTagName("script")[0];     s.parentNode.insertBefore(bp, s); })(); </script> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="hexo" scheme="http://voicezyx.top/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://voicezyx.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>字典和列表</title>
    <link href="http://voicezyx.top/%E5%AD%97%E5%85%B8%E4%B8%8E%E5%88%97%E8%A1%A8.html"/>
    <id>http://voicezyx.top/字典与列表.html</id>
    <published>2018-09-15T07:05:36.426Z</published>
    <updated>2018-09-15T04:32:24.132Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、字典"><a href="#1、字典" class="headerlink" title="1、字典"></a>1、字典</h3><p>dictionary 字典，是除列表以外,python中最灵活的数据类型。字典可以存储多个数据，存储相关的信息</p><h4 id="字典的定义格式"><a href="#字典的定义格式" class="headerlink" title="字典的定义格式:"></a>字典的定义格式:</h4><p>dict = {key:value,key:value}</p><ol><li>字典使用键值对存储数据，键值对键名和键值</li><li>键名  key 就是键索引</li><li>键值  value 是数据</li><li>键名和键值之间用:</li><li>值可以是任何类型,键名只能是字符串，数字，元组</li></ol><h4 id="字典和列表的区别"><a href="#字典和列表的区别" class="headerlink" title="字典和列表的区别"></a>字典和列表的区别</h4><p>列表是有序的集合 下标是从0开始的正整数 </p><p>字典是无序的集合  ,通过键名来访问数据</p><h3 id="2、使用键访问字典的值"><a href="#2、使用键访问字典的值" class="headerlink" title="2、使用键访问字典的值"></a>2、使用键访问字典的值</h3><p># 定义一个字典类型<br>dict ={<br>    “name”:”xxx”,<br>    “edu”:”本科”,<br>    “age”:18,<br>    “marry”:True<br>}<br># 取出字典中的某个元素的值</p><p>Dict[‘age’]<br>print(dict[‘name’])<br>print(dict[‘edu’])<br>print(dict[‘age’])<br>print(dict[‘marry’])</p><h3 id="3、字典的操作，增加-、删除-，修改"><a href="#3、字典的操作，增加-、删除-，修改" class="headerlink" title="3、字典的操作，增加 、删除 ，修改"></a>3、字典的操作，增加 、删除 ，修改</h3><table><thead><tr><th>1</th><th>增加</th><th>字典[键] =数据</th><th>键不存在，会添加键值对；键存在，会修改键值对的值</th></tr></thead><tbody><tr><td>2</td><td>删除</td><td>字典.pop(键)</td><td>删除指定键值对,返回被删除的值</td></tr><tr><td></td><td></td><td>字典.clear</td><td>清空字典</td></tr><tr><td>3</td><td>修改</td><td>字典[键]=数据</td><td>键不存在，会添加键值对；键存在，会修改键值对的值</td></tr><tr><td>4</td><td>查询</td><td>字典[键]</td><td>根据键的取值，键值对不存在会报错</td></tr><tr><td></td><td></td><td>字典.keys()</td><td>可以进行遍历，获取所有的键名</td></tr><tr><td></td><td></td><td>字典.values()</td><td>可以进行遍历，获取索引的键值</td></tr><tr><td></td><td></td><td>字典.items()</td><td>可以进行遍历，获取所有的（键,值）键值对</td></tr><tr><td></td><td></td><td>默认获取的是键名</td></tr></tbody></table><h4 id="使用for字典的遍历"><a href="#使用for字典的遍历" class="headerlink" title="使用for字典的遍历"></a>使用for字典的遍历</h4><p>默认是键名</p><p>遍历键名和键值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">dicts =&#123;&quot;names&quot;:&quot;张三&quot;,&quot;ages&quot;:30,&quot;sex&quot;:&quot;男&quot;&#125;</span><br><span class="line"># 键值对</span><br><span class="line">for obj in dicts.items():</span><br><span class="line">    print(obj)</span><br><span class="line"># 结果是</span><br><span class="line">(&apos;names&apos;, &apos;张三&apos;)</span><br><span class="line">(&apos;ages&apos;, 30)</span><br><span class="line">(&apos;sex&apos;, &apos;男&apos;)</span><br><span class="line"># 键和值</span><br><span class="line">for k,v in dicts.items():</span><br><span class="line"></span><br><span class="line">    print(&quot;键是%s 值是%s&quot;%(k,v))</span><br><span class="line">#得到键值</span><br><span class="line">for v in dicts.values():</span><br><span class="line">#     print(v)</span><br><span class="line">#遍历  默认是键名</span><br><span class="line">for k in dicts:</span><br><span class="line">     print(k)</span><br><span class="line">#遍历字典中的键名</span><br><span class="line">for k in dicts.keys():  # 键名</span><br><span class="line"></span><br><span class="line">    print(k)</span><br></pre></td></tr></table></figure><h3 id="4、列表-重点"><a href="#4、列表-重点" class="headerlink" title="4、列表(重点)"></a>4、列表(重点)</h3><h4 id="列表的基本格式"><a href="#列表的基本格式" class="headerlink" title="列表的基本格式"></a>列表的基本格式</h4><ol><li>list (列表) 是python中使用<strong>最频繁</strong>的数据类型</li><li>专门用来存储一串数据，存储的数据 称之为 元素</li><li>通常放的是同类型 </li><li>列表的索引（下标）从 0开始的 正整数 0 1 2 3 4 5 6 7 有序的</li></ol><p>例如：</p><p> [10,20,30,40,50,60]  统一的类型</p><p> [“张三”,”李四”,”王五”]  统一的类型</p><p>格式</p><p>[元素1,元素2,元素3,元素4,元素5]</p><p>[10,20,30]</p><p>列表的索引（下标）  从0开始的正整数  0,1,2,3,4….</p><p> 例如：</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/4.png" alt=""></p><h4 id="获取列表中的某个元素"><a href="#获取列表中的某个元素" class="headerlink" title="获取列表中的某个元素"></a>获取列表中的某个元素</h4><p>name_list = [‘柳’,’张’,’关’]</p><p># 取出列表中的元素值</p><p>print(name_list[0])</p><p>print(name_list[1])</p><p>print(name_list[2])</p><p>注意;取值的时候，如果超出索引的范围，程序就会报错</p><h3 id="5、列表的常见操作"><a href="#5、列表的常见操作" class="headerlink" title="5、列表的常见操作"></a>5、列表的常见操作</h3><table><thead><tr><th>1</th><th>增加</th><th>列表.append(数据)</th><th>在末尾追加数据，并且每次只能添加一个</th></tr></thead><tbody><tr><td></td><td></td><td>列表.extend([4,5,6,7,8])</td><td>可迭代:集合</td></tr><tr><td></td><td></td><td>列表.insert(索引, 数据)</td><td>在指定位置插入数据(位置前有空元素会补位)</td></tr><tr><td>2</td><td>删除</td><td>del 列表[索引]</td><td>删除指定索引的数据</td></tr><tr><td></td><td></td><td>列表.remove(数据)</td><td>删除第一个出现的指定数据</td></tr><tr><td></td><td></td><td>列表.pop()</td><td>删除列表中的最后一个元素  有返回值，删除的元素</td></tr><tr><td></td><td></td><td>列表.pop(索引)</td><td>删除指定索引数据</td></tr><tr><td></td><td></td><td>列表.clear()</td><td>清空列表</td></tr><tr><td>3</td><td>修改</td><td>列表[索引] =数据</td><td>修改指定索引的数据，如果数据不存在，就报错</td></tr><tr><td>4</td><td>查询</td><td>列表[索引]</td><td>根据索引取值,如果索引不存在，就会报错</td></tr><tr><td></td><td></td><td>len(列表)</td><td>列表的长度</td></tr><tr><td></td><td></td><td>if 数据 in 列表</td><td>检查列表中是否包含某元素</td></tr><tr><td>5</td><td>排序</td><td>列表.sort()</td><td>升序排列</td></tr></tbody></table><h3 id="6、使用for的循环遍历列表"><a href="#6、使用for的循环遍历列表" class="headerlink" title="6、使用for的循环遍历列表"></a>6、使用for的循环遍历列表</h3><p>遍历就是从头到尾依次取出每一个元素，并且执行相同的操作</p><p>python中实现遍历的方式很多，比如or循环等</p><p>python中为了提高列表中的遍历效率，专门提供了for循环实现遍历</p><h3 id="7、列表的嵌套"><a href="#7、列表的嵌套" class="headerlink" title="7、列表的嵌套"></a>7、列表的嵌套</h3><p>  一个列表中的元素又是一个列表，那么这就是列表的嵌套</p><p>city =[</p><p>[“朝阳区”,”海淀区”],</p><p>[“浦东区”,”金山区”,”宝安区”]</p><p>]</p><p>案例：</p><p>一个学校，有3个办公室，现在有8位老师等待工位的分配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">office=[[],[],[]]</span><br><span class="line">teacher=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;f&apos;,&apos;g&apos;,&apos;h&apos;,&apos;i&apos;]</span><br><span class="line">for name in teacher:</span><br><span class="line">    index=random.randint(0,2)</span><br><span class="line">    office[index].append(name)</span><br><span class="line">print(office)</span><br></pre></td></tr></table></figure><h3 id="8、应用场景"><a href="#8、应用场景" class="headerlink" title="8、应用场景"></a>8、应用场景</h3><ol><li>尽管 <code>**Python**</code> 的 <strong>列表</strong> 中可以 <strong>存储不同类型的数据</strong></li><li>但是在开发中，更多的应用场景是</li></ol><ul><li><strong>列表</strong> 存储相同类型的数据</li><li>通过 <strong>for**</strong>循环**，在循环体内部，针对列表中的每一项元素，执行相同的操作</li></ul><script> (function(){     var bp = document.createElement('script');     var curProtocol = window.location.protocol.split(':')[0];     if (curProtocol === 'https'){    bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';   }   else{   bp.src = 'http://push.zhanzhang.baidu.com/push.js';   }     var s = document.getElementsByTagName("script")[0];     s.parentNode.insertBefore(bp, s); })(); </script> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Python" scheme="http://voicezyx.top/categories/Python/"/>
    
    
      <category term="字典" scheme="http://voicezyx.top/tags/%E5%AD%97%E5%85%B8/"/>
    
      <category term="列表" scheme="http://voicezyx.top/tags/%E5%88%97%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>名片管理系统</title>
    <link href="http://voicezyx.top/%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html"/>
    <id>http://voicezyx.top/名片管理系统.html</id>
    <published>2018-09-15T07:05:36.426Z</published>
    <updated>2018-09-15T04:32:17.462Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><h4 id="1、框架搭建"><a href="#1、框架搭建" class="headerlink" title="1、框架搭建"></a>1、框架搭建</h4><h4 id="2、新增名片"><a href="#2、新增名片" class="headerlink" title="2、新增名片"></a>2、新增名片</h4><h4 id="3、显示所有名片"><a href="#3、显示所有名片" class="headerlink" title="3、显示所有名片"></a>3、显示所有名片</h4><h4 id="4、查询名片"><a href="#4、查询名片" class="headerlink" title="4、查询名片"></a>4、查询名片</h4><h4 id="5、查询成功后修改、删除名片"><a href="#5、查询成功后修改、删除名片" class="headerlink" title="5、查询成功后修改、删除名片"></a>5、查询成功后修改、删除名片</h4><h4 id="6、让-Python-程序能够直接运行"><a href="#6、让-Python-程序能够直接运行" class="headerlink" title="6、让 Python 程序能够直接运行"></a>6、让 Python 程序能够直接运行</h4><h3 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">main.py  一般写业务逻辑</span><br><span class="line"></span><br><span class="line">from tool import *</span><br><span class="line">while True:</span><br><span class="line">    show_menu()</span><br><span class="line">    operation=int(input(&quot;请输入您的操作：&quot;))</span><br><span class="line">    print(&quot;您选择的操作是：%s&quot;%operation)</span><br><span class="line">    if operation==1:  #添加名片操作</span><br><span class="line">        add_Info()</span><br><span class="line">    elif operation ==2:  # 显示全部操作</span><br><span class="line">        show_all()</span><br><span class="line">    elif operation == 3:  #查看名片操作</span><br><span class="line">        find_Info()</span><br><span class="line">    elif operation == 0:  #退出系统</span><br><span class="line">        print(&quot;退出系统&quot;)</span><br><span class="line">        break</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;输入错误，请重新输入&quot;)</span><br><span class="line">        continue</span><br></pre></td></tr></table></figure><h3 id="tool-py"><a href="#tool-py" class="headerlink" title="tool.py"></a>tool.py</h3><p>写要实现的功能，写函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">Info_list=[]  #存储输入的所有名片信息</span><br><span class="line">target_Info=&#123;&#125;   #存储查找的名片信息</span><br><span class="line">def show_menu():</span><br><span class="line">    print(&quot;*&quot;*30)</span><br><span class="line">    print(&quot;    欢迎使用名片管理系统  &quot;)</span><br><span class="line">    print(&quot;1、添加名片    2、显示全部&quot;)</span><br><span class="line">    print(&quot;3、查看名片    0、退出系统&quot;)</span><br><span class="line">    print(&quot;*&quot;*30)</span><br><span class="line">def add_Info():</span><br><span class="line">    print(&quot;请根据提示添加信息：&quot;)</span><br><span class="line">    names=input(&quot;请输入名字：&quot;)</span><br><span class="line">    age=input(&quot;请输入年龄：&quot;)</span><br><span class="line">    sex=input(&quot;请输入性别：&quot;)</span><br><span class="line">    address=input(&quot;请输入住址：&quot;)</span><br><span class="line">    Info_list.append(&#123;&quot;name&quot;:names,&quot;age&quot;:age,&quot;sex&quot;:sex,&quot;address&quot;:address&#125;)</span><br><span class="line">    print(&quot;添加%s的信息成功&quot;%names)</span><br><span class="line">    print(Info_list)</span><br><span class="line"></span><br><span class="line">def show_all():</span><br><span class="line">    print(&quot;显示所有名片信息&quot;)</span><br><span class="line">    if len(Info_list)==0:</span><br><span class="line">        print(&quot;当前信息系统中信息为空&quot;)</span><br><span class="line">    show_title()</span><br><span class="line">    for i in Info_list:</span><br><span class="line">        print(&quot;%s\t\t%s\t\t%s\t\t%s&quot; %(i[&quot;name&quot;],i[&quot;age&quot;],i[&quot;sex&quot;],i[&quot;address&quot;]))</span><br><span class="line">    print(&quot;-&quot;*30)</span><br><span class="line"></span><br><span class="line">def find_Info():</span><br><span class="line">    print(&quot;功能：查找要寻找的信息&quot;)</span><br><span class="line">    if len(Info_list)&gt;0:</span><br><span class="line">        find_name = input(&quot;请输入您要查找名片的名字：&quot;)</span><br><span class="line">        for Info in Info_list:</span><br><span class="line">            if find_name==Info[&quot;name&quot;]:</span><br><span class="line">                print(&quot;找到了&quot;)</span><br><span class="line">                show_title()</span><br><span class="line">                print(&quot;%s\t\t%s\t\t%s\t\t%s&quot; % (</span><br><span class="line">                    Info[&quot;name&quot;], Info[&quot;age&quot;], Info[&quot;sex&quot;], Info[&quot;address&quot;]</span><br><span class="line">                ))</span><br><span class="line">                global target_Info  #使用的是全局的变量</span><br><span class="line">                target_Info = Info #查到的信息放入全局变量target_Info中</span><br><span class="line">                deal()</span><br><span class="line">                break</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;没有找到该信息！&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;列表中没有信息！&quot;)</span><br><span class="line">def show_title():</span><br><span class="line">    print(&quot;姓名\t\t电话\t\tqq\t\t邮箱&quot;)</span><br><span class="line">    print(&quot;*&quot;*30)</span><br><span class="line"></span><br><span class="line">def deal():</span><br><span class="line">    while True:</span><br><span class="line">        print(&quot;请选择你要对信息的操作：1、修改 2、删除、3、返回&quot;)</span><br><span class="line">        choice=input()</span><br><span class="line">        if choice == &apos;1&apos;:   #修改信息</span><br><span class="line">            update()</span><br><span class="line">            break</span><br><span class="line">        elif choice == &apos;2&apos;:  #删除信息</span><br><span class="line">            del_Info()</span><br><span class="line">            #Info_list.remove(target_Info)</span><br><span class="line">            print(&quot;删除成功&quot;)</span><br><span class="line">            break</span><br><span class="line">        elif choice == &apos;3&apos;:   #返回</span><br><span class="line">            break</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;选择错误，请重新选择&quot;)</span><br><span class="line">def update():</span><br><span class="line">    target_Info[&quot;name&quot;] = input(&quot;请输入姓名：&quot;)</span><br><span class="line">    target_Info[&quot;age&quot;] = input(&quot;请输入年龄：&quot;)</span><br><span class="line">    target_Info[&quot;sex&quot;] = input(&quot;请输入性别：&quot;)</span><br><span class="line">    target_Info[&quot;address&quot;] = input(&quot;请输入住址：&quot;)</span><br><span class="line">def del_Info():</span><br><span class="line">    Info_list.remove(target_Info)</span><br></pre></td></tr></table></figure> <script> (function(){     var bp = document.createElement('script');     var curProtocol = window.location.protocol.split(':')[0];     if (curProtocol === 'https'){    bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';   }   else{   bp.src = 'http://push.zhanzhang.baidu.com/push.js';   }     var s = document.getElementsByTagName("script")[0];     s.parentNode.insertBefore(bp, s); })(); </script> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Python" scheme="http://voicezyx.top/categories/Python/"/>
    
    
      <category term="名片管理系统" scheme="http://voicezyx.top/tags/%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>变量和关键字</title>
    <link href="http://voicezyx.top/%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%B3%E9%94%AE%E5%AD%97.html"/>
    <id>http://voicezyx.top/变量和关键字.html</id>
    <published>2018-09-15T07:05:36.410Z</published>
    <updated>2018-09-15T04:32:11.519Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、变量（用了存储数据，找到数据）"><a href="#1、变量（用了存储数据，找到数据）" class="headerlink" title="1、变量（用了存储数据，找到数据）"></a>1、<strong>变量（用了存储数据，找到数据）</strong></h3><p><strong>变量：在内存中开辟一块空间，起一个别名，用了访问和存储空间中的数据</strong></p><p><strong>变量的特点：</strong></p><pre><code>可以反复存储数据可以反复取出数据可以反复更改数据</code></pre><h3 id="2、变量的命名规则："><a href="#2、变量的命名规则：" class="headerlink" title="2、变量的命名规则："></a><strong>2、变量的命名</strong>规则：</h3><p>1、开头是字母 或下划线 后面可以是字母 数字 下划线</p><p>_abc  True</p><p>12abc  错误 False</p><p>name#pass   特殊字符</p><p>2、不能以关键字名（关键字在python中有特殊的含有  def  if  else）</p><pre><code>查看关键字用:</code></pre><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/3.png" alt=""></p><h3 id="3、标识符和关键字"><a href="#3、标识符和关键字" class="headerlink" title="3、标识符和关键字"></a><strong>3、标识符和关键字</strong></h3><p> 标识符</p><p>标示符就是程序员定义的 <strong>变量名</strong>、<strong>函数名</strong></p><p><strong>名字</strong> 需要有 <strong>见名知义</strong> 的效果，见下图：</p><ul><li>标示符可以由 <strong>字母</strong>、<strong>下划线</strong> 和 <strong>数字</strong> 组成</li><li><strong>不能以数字开头</strong></li><li><strong>不能与关键字重名</strong></li></ul><ol><li><p>变量名要见名知义的效果</p><pre><code>![](https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/2.png)</code></pre><p>一般在工作中命名规范 :</p></li></ol><p>可以使用驼峰命名法 :小驼峰 （多个单词构成）</p><p>第一个单词小写，后面的单词首字母大写</p><pre><code>oneTwoThree  userName  passWord</code></pre><p> 大驼峰 :  每个单词的首字母大写</p><pre><code>OneTwoThree  UserName</code></pre><p>使用下划线命名法: 单词和单词之间用_</p><pre><code>one_two_three  user_name</code></pre><h3 id="4、-关键字"><a href="#4、-关键字" class="headerlink" title="4、 关键字"></a><strong>4、 关键字</strong></h3><ul><li><strong>关键字</strong> 就是在 <code>Python</code> 内部已经使用的标识符</li><li><strong>关键字</strong> 具有特殊的功能和含义</li><li>开发者 <strong>不允许定义和关键字相同的名字的标示符</strong></li></ul><p>通过以下命令可以查看 关键字：</p><pre><code>![](https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/3.png)</code></pre><p>   注意：变量名是区分大小写</p><h3 id="5、变量的创建-重点"><a href="#5、变量的创建-重点" class="headerlink" title="5、变量的创建(重点)"></a><strong>5、变量的创建(重点)</strong></h3><p>在python中，每一个变量在使用前都必须<strong>赋值</strong>，变量赋值后，变量就创建了</p><p>变量名 = 值   </p><ol><li>等号(=) 用了给变量赋值</li><li>=  左边是变量名</li><li>=  右边的是用来存储变量的值</li></ol><p><strong>变量演练1</strong></p><p>定义两个变量，分别用来存储用户名和密码，</p><p>并且输出用户名和密码</p><h4 id="定义一个淘宝的账号"><a href="#定义一个淘宝的账号" class="headerlink" title="定义一个淘宝的账号"></a>定义一个淘宝的账号</h4><p>tb_user = “gongfuxong”<br># 定义一个淘宝的密码<br>tb_password = “123345”<br># 输出变量的值用 print()<br>print(tb_user)<br>print(tb_password)</p><h4 id="变量的演练2"><a href="#变量的演练2" class="headerlink" title="变量的演练2"></a><strong>变量的演练2</strong></h4><p>超市买苹果</p><p>需求</p><ol><li>苹果的价格是 8.5 元/斤 price</li><li>买了 7.5 斤 苹果  weight</li><li>计算付款金额</li><li>输出金额</li></ol><p>#  定义苹果的价格<br>price = 5.5<br># 定义苹果的重量<br>weight = 2<br># 计算苹果总共的金额<br>money = price * weight<br># 输出结果<br>print(money）</p><h3 id="6、变量的类型"><a href="#6、变量的类型" class="headerlink" title="6、变量的类型"></a><strong>6、变量的类型</strong></h3><p>在程序中，为了更好的区分变量的功能和更有效的管理内存，变量也分为不同的类型</p><p><strong>变量的数据类型是由值决定的</strong></p><p>变量的数据类型，根据 =右边的值推导出来的</p><p><strong>1、变量的数据类型的分类</strong></p><p> 变量的数据类型分为 数字型 和非数字型</p><p><strong>数字型</strong></p><pre><code>整型（int）  :输入的是整数   例如: age =20               Price = 9   int               Weight  =50  int浮点型(float) :  输入的是 小数   例如  height= 1.75 Weight = 90.88  float Height = 1.99   float布尔型（bool） 有两个值 True(真) 是1  ,False（假） 是0  例如 marry = True  或  result = 5&gt;6 </code></pre><p>“5”+”6”     </p><p>比较运算返回的是布尔型</p><p> 测试数据类型type(变量)</p><p><strong>非数字型</strong></p><pre><code>字符串str：用双引号或单引号括起来的是**字符串**列表list元组tuple字典dict</code></pre><h3 id="7、测试变量的数据类型"><a href="#7、测试变量的数据类型" class="headerlink" title="7、测试变量的数据类型"></a><strong>7、测试变量的数据类型</strong></h3><p> 用<strong>type(**</strong>变量<strong>**)</strong>   测试变量的数据类型</p><p>  N1=  20  int</p><p>  N2= 20.444   float</p><p>  N3= “你好”  str</p><p>  N4=True   bool</p><p>  N5=False   bool</p><p>print(type(N1))</p><p>print(type(N2))</p><p>……</p><script> (function(){     var bp = document.createElement('script');     var curProtocol = window.location.protocol.split(':')[0];     if (curProtocol === 'https'){    bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';   }   else{   bp.src = 'http://push.zhanzhang.baidu.com/push.js';   }     var s = document.getElementsByTagName("script")[0];     s.parentNode.insertBefore(bp, s); })(); </script> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Python" scheme="http://voicezyx.top/categories/Python/"/>
    
    
      <category term="变量" scheme="http://voicezyx.top/tags/%E5%8F%98%E9%87%8F/"/>
    
      <category term="关键字" scheme="http://voicezyx.top/tags/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>python--while循环、for循环</title>
    <link href="http://voicezyx.top/while%E5%BE%AA%E7%8E%AF%E3%80%81for%E5%BE%AA%E7%8E%AF.html"/>
    <id>http://voicezyx.top/while循环、for循环.html</id>
    <published>2018-09-15T07:05:36.395Z</published>
    <updated>2018-09-15T04:32:04.290Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、while循环"><a href="#1、while循环" class="headerlink" title="1、while循环"></a><strong>1、while循环</strong></h3><h4 id="while-循环的基本格式"><a href="#while-循环的基本格式" class="headerlink" title="while 循环的基本格式"></a><strong>while 循环的基本格式</strong></h4><p>  1、变量的初始化</p><p>  while 条件2:</p><pre><code>条件满足时候:执行该代码条件满足时候:执行该代码**3****变量的更新**</code></pre><h3 id="2、while-循环的应用"><a href="#2、while-循环的应用" class="headerlink" title="2、while 循环的应用"></a><strong>2、while 循环的应用</strong></h3><h4 id="1、while循环输出"><a href="#1、while循环输出" class="headerlink" title="1、while循环输出"></a>1、while循环输出</h4><p>while循环输出20次我爱你</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/5.png" alt=""></p><h4 id="2、while循环输出1-100累加和"><a href="#2、while循环输出1-100累加和" class="headerlink" title="2、while循环输出1-100累加和"></a>2、while循环输出1-100累加和</h4><p># 1-100之间所有数的和<br># 1变量的初始化<br>i = 0<br>sum = 0 #存储和<br># 判断条件<br>while i &lt;= 100:<br>    sum += i  # sum = sum +i   求和</p><pre><code># 变量的更新i += 1</code></pre><p>print(sum)</p><p>3、输出1-100之间偶数的和</p><p># 1-100之间偶数的和<br># 1变量的初始化<br>i = 0<br>sum = 0 #存储和<br># 判断条件<br>while i &lt;= 100:<br>    if i % 2 == 0:  # 是否是偶数<br>        sum += i  # sum = sum +i   求和</p><pre><code># 变量的更新i += 1</code></pre><p>print(“1-100之间所有偶数的和%s”%sum)</p><h3 id="3、while循环嵌套-了解"><a href="#3、while循环嵌套-了解" class="headerlink" title="3、while循环嵌套(了解)"></a><strong>3、while循环嵌套(了解)</strong></h3><p>while嵌套的 while里面还有while</p><p>While 执行一次  ,里面多次</p><p><strong>While嵌套的基本的格式（了解）</strong></p><p>while 条件1</p><p>条件1满足时,执行该代码</p><p>条件1满足时,执行该代码</p><p>while 条件2：</p><p>条件2满足时，执行该代码</p><p>外部的while 循环一次，里面的while循环多次</p><p><strong>外边的while 循环一次，里面的while循环多次</strong></p><h4 id="1、使用while循环打印三角形的练习"><a href="#1、使用while循环打印三角形的练习" class="headerlink" title="1、使用while循环打印三角形的练习"></a><strong>1、使用while循环打印三角形的练习</strong></h4><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/6.png" alt=""></p><p>第一行  1     星星的个数 行数是一样</p><p>第二行  2</p><p>第三行  3</p><p>第四行   4</p><p>第五行  5</p><p>用一个while 也可以实现</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/7.png" alt=""></p><h4 id="2、九九乘法表"><a href="#2、九九乘法表" class="headerlink" title="2、九九乘法表"></a><strong>2、九九乘法表</strong></h4><p>1 * 1 = 1</p><p>1 <em> 2 = 2    2 </em> 2 =4</p><p>1 <em> 3 =3     2 </em> 3 =6  3 * 3 =9</p><p>前面的数  星星的个数   * 行数     =</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/8.png" alt=""></p><p>注意：外层执行一遍，内层执行多次</p><h3 id="4、for循环"><a href="#4、for循环" class="headerlink" title="4、for循环"></a>4、for循环</h3><p>像while循环一样，for可以完成循环功能</p><p>python中可以用for循环遍历任何系列的项目,如果一个列表或一个字符串</p><h4 id="for-循环的基本格式"><a href="#for-循环的基本格式" class="headerlink" title="for 循环的基本格式"></a>for 循环的基本格式</h4><p>For  变量  in  数据</p><pre><code>代码</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in range(0,11):</span><br><span class="line">    print(i,end=&quot; &quot;)</span><br></pre></td></tr></table></figure><h3 id="5、扩展"><a href="#5、扩展" class="headerlink" title="5、扩展"></a>5、扩展</h3><p>range(start,stop) 函数可创建一个整数int列表，一般用在 for 循环中。</p><ol><li>start: 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5）</li><li>stop: 计数到 stop 结束，但不包括 stop。例如：range（0， 5）是[0, 1, 2, 3, 4]没有</li></ol><p>例如：</p><p>range(5)  ====range(0,5)     ===0,1,2,3,4</p><p>range(3,9)   3  4 5 6 7 8</p><p>range(1,100)  1 2 3 4…99</p><h3 id="6、break-和continue作用"><a href="#6、break-和continue作用" class="headerlink" title="6、break 和continue作用"></a>6、break 和continue作用</h3><p>注意：break continue 结合 条件判断     满足一定的条件，退出</p><p>break 退出的是相关的所有的循环</p><p>Continue 退出是当前的循环，进入下一次循环</p><script> (function(){     var bp = document.createElement('script');     var curProtocol = window.location.protocol.split(':')[0];     if (curProtocol === 'https'){    bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';   }   else{   bp.src = 'http://push.zhanzhang.baidu.com/push.js';   }     var s = document.getElementsByTagName("script")[0];     s.parentNode.insertBefore(bp, s); })(); </script> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Python" scheme="http://voicezyx.top/categories/Python/"/>
    
    
      <category term="while循环" scheme="http://voicezyx.top/tags/while%E5%BE%AA%E7%8E%AF/"/>
    
      <category term="for循环" scheme="http://voicezyx.top/tags/for%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>pycharm联网不能登陆的激活问题</title>
    <link href="http://voicezyx.top/pycharm%E8%81%94%E7%BD%91%E4%B8%8D%E8%83%BD%E7%99%BB%E9%99%86%E7%9A%84%E6%BF%80%E6%B4%BB%E9%97%AE%E9%A2%98.html"/>
    <id>http://voicezyx.top/pycharm联网不能登陆的激活问题.html</id>
    <published>2018-09-15T07:05:36.379Z</published>
    <updated>2018-09-15T04:31:57.607Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><p>进入C:\Windows\System32\drivers\etc，找到hosts文件，复制一份到桌面，然后进行编辑，将下面的内容粘贴到最后，并保存，然后把文件放回源目录，替换之前的文件。</p><p> 0.0.0.0         account.jetbrains.com </p><p>然后重新激活对应的pycharm即可。 </p><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>输入下面的命令， </p><p>sudo vi /etc/hosts</p><p>打开host文件，打开之后，将  </p><p>0.0.0.0         account.jetbrains.com </p><p>粘贴到最后，并保存，</p><p>然后重新激活对应的pycharm即可。 </p><script> (function(){     var bp = document.createElement('script');     var curProtocol = window.location.protocol.split(':')[0];     if (curProtocol === 'https'){    bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';   }   else{   bp.src = 'http://push.zhanzhang.baidu.com/push.js';   }     var s = document.getElementsByTagName("script")[0];     s.parentNode.insertBefore(bp, s); })(); </script> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Python" scheme="http://voicezyx.top/categories/Python/"/>
    
    
      <category term="pycharm" scheme="http://voicezyx.top/tags/pycharm/"/>
    
      <category term="pycharm激活" scheme="http://voicezyx.top/tags/pycharm%E6%BF%80%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>pycharm连接mysql，navicat破解工具</title>
    <link href="http://voicezyx.top/pycharm%E8%BF%9E%E6%8E%A5mysql%EF%BC%8Cnavicat%E7%A0%B4%E8%A7%A3%E5%B7%A5%E5%85%B7.html"/>
    <id>http://voicezyx.top/pycharm连接mysql，navicat破解工具.html</id>
    <published>2018-09-15T07:05:36.364Z</published>
    <updated>2018-09-15T04:31:50.376Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Pycharm连接mysql</p><p>1、 下载安装pycharm</p><p>2、 可以到官网下载，我用的是2017版，链接在下边，可以自行下载安装。</p><p>链接：<a href="https://pan.baidu.com/s/178GGasShAleTF2RtS8jDiw" target="_blank" rel="noopener">https://pan.baidu.com/s/178GGasShAleTF2RtS8jDiw</a> 密码：2ujf</p><p>3、 安装mysql和navicat Premium（数据库管理工具）</p><p>下载navicat后，总会提示试用期14天，可以用下边分享的软件进行破解，下载完解压直接运行就好。</p><p>链接：<a href="https://pan.baidu.com/s/1gR4fXmRg3Wwf2AMJiamlTA" target="_blank" rel="noopener">https://pan.baidu.com/s/1gR4fXmRg3Wwf2AMJiamlTA</a> 密码：1xzd</p><p>4、 安装mysql时，没什么特别需要注意的，端口一般就选默认的3306就好，账户名字和密码需要记好。</p><p>5、 安装完navicat后，打开，连接mysql，点击连接，选择mysql。</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/9.png" alt=""></p><p>然后会出现新建连接的设置，连接名可以自己起，用户名和密码和刚才mysql设置的一样。</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/10.png" alt=""></p><p>设置完以后，打开mysql，然后在navicat中双击刚才创建的连接，绿色显示就表示已经连接成功了。</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/11.png" alt=""></p><p>6、pycharm里设置</p><p>看你的pycharm中是否有Database Navigator插件。</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/12.png" alt=""></p><p>如果没有的话，在上边搜索，然后安装插件，然后点击应用。</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/13.png" alt=""></p><p>然后看pycharm界面，是否出现Database相关的按键，我的在最左边一列，点击后出现如下界面：</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/14.png" alt=""></p><p>然后点击setting进行端口，用户，密码设置。设置完以后点击test connection，检测是否可用连接成功。</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/15.png" alt=""></p><p>连接成功后也会看到刚才数据库里建的两个表。</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/16.png" alt=""></p><script> (function(){     var bp = document.createElement('script');     var curProtocol = window.location.protocol.split(':')[0];     if (curProtocol === 'https'){    bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';   }   else{   bp.src = 'http://push.zhanzhang.baidu.com/push.js';   }     var s = document.getElementsByTagName("script")[0];     s.parentNode.insertBefore(bp, s); })(); </script> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Python" scheme="http://voicezyx.top/categories/Python/"/>
    
    
      <category term="mysql" scheme="http://voicezyx.top/tags/mysql/"/>
    
      <category term="navicat" scheme="http://voicezyx.top/tags/navicat/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB基本操作</title>
    <link href="http://voicezyx.top/MongoDB%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html"/>
    <id>http://voicezyx.top/MongoDB基本操作.html</id>
    <published>2018-09-15T07:05:36.348Z</published>
    <updated>2018-09-15T04:31:43.239Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、操作MongoDB数据库"><a href="#一、操作MongoDB数据库" class="headerlink" title="一、操作MongoDB数据库"></a>一、操作MongoDB数据库</h2><h3 id="1、创建数据库"><a href="#1、创建数据库" class="headerlink" title="1、创建数据库"></a>1、创建数据库</h3><pre><code>语法：use 数据库名注意：如果数据库不存在，则创建，否则切换到该数据库如果刚才创建的数据库不在列表内，如果要显示刚创建的数据库，我们需要向刚创建的数据库插入一些数据  (db.student.insert({name:&quot;tom&quot;,age:18,gender:1,address：&quot;北京&quot;,isDelete:0}))</code></pre><h3 id="2、删除数据库"><a href="#2、删除数据库" class="headerlink" title="2、删除数据库"></a>2、删除数据库</h3><pre><code>前提：必须正在使用要删除的数据库db.dropDatabase()</code></pre><h3 id="3、查看所有数据"><a href="#3、查看所有数据" class="headerlink" title="3、查看所有数据"></a>3、查看所有数据</h3><pre><code>show dbs</code></pre><h3 id="4、查看当前正在使用的数据库"><a href="#4、查看当前正在使用的数据库" class="headerlink" title="4、查看当前正在使用的数据库"></a>4、查看当前正在使用的数据库</h3><pre><code>dbdb.getName()</code></pre><h3 id="5、断开连接"><a href="#5、断开连接" class="headerlink" title="5、断开连接"></a>5、断开连接</h3><pre><code>exit</code></pre><h3 id="6、查看命令API："><a href="#6、查看命令API：" class="headerlink" title="6、查看命令API："></a>6、查看命令API：</h3><pre><code>help</code></pre><h2 id="二、集合操作"><a href="#二、集合操作" class="headerlink" title="二、集合操作"></a>二、集合操作</h2><h3 id="1、查看当前数据库下有哪些集合"><a href="#1、查看当前数据库下有哪些集合" class="headerlink" title="1、查看当前数据库下有哪些集合"></a>1、查看当前数据库下有哪些集合</h3><pre><code>show collections</code></pre><h3 id="2、创建集合"><a href="#2、创建集合" class="headerlink" title="2、创建集合"></a>2、创建集合</h3><pre><code>a、语法：db.createCollection(&quot;集合名&quot;)示例：db.createCollection(&quot;class&quot;)b、语法：db.集合名.insert(document)示例：db.student.insert({name:&quot;tom&quot;,age:18,gender:1,address：&quot;北京&quot;,isDelete:0})区别：前者创建的是一个空的集合，后者创建一个空的集合并添加一个文档</code></pre><h3 id="3、删除当前数据库中的集合"><a href="#3、删除当前数据库中的集合" class="headerlink" title="3、删除当前数据库中的集合"></a>3、删除当前数据库中的集合</h3><pre><code>语法：db.集合名.drop()</code></pre><h2 id="三、文档操作"><a href="#三、文档操作" class="headerlink" title="三、文档操作"></a>三、文档操作</h2><h3 id="1、插入文档"><a href="#1、插入文档" class="headerlink" title="1、插入文档"></a>1、插入文档</h3><h4 id="1、使用insert-方法插入文档"><a href="#1、使用insert-方法插入文档" class="headerlink" title="1、使用insert()方法插入文档"></a>1、使用insert()方法插入文档</h4><pre><code>语法：db.集合名.insert(文档)插入一个：示例：db.student.insert({name:&quot;jack&quot;,age:18,gender:1,address：&quot;北京&quot;,isDelete:0})插入多条：db.集合名.insert([文档1,文档2])示例：db.student.insert([{name:&quot;z&quot;,age:17,gender:0,address:&quot;杭州&quot;,isDelete:0},{name:&quot;zz&quot;,age:25,gender:0,address:&quot;上海&quot;,isDelete:0}])</code></pre><h4 id="2、使用save-方法插入文档"><a href="#2、使用save-方法插入文档" class="headerlink" title="2、使用save()方法插入文档"></a>2、使用save()方法插入文档</h4><pre><code>语法：db.集合名.save(文档)注意：如果不指定_id字段，save()方法类似于insert()方法，如果指定_id字段，则会更新_id字段的数据没有指定_id字段（和insert方法效果一样）：db.student.insert({name:&quot;jack&quot;,age:18,gender:1,address：&quot;北京&quot;,isDelete:0})指定_id字段：        db.student.save({_id:ObjectId(&quot;5b753350178db1d794e3f06f&quot;),&quot;name&quot;:&quot;tom&quot;,&quot;age&quot;:23,&quot;gender&quot;:1.0,&quot;address&quot;:&quot;上海&quot;,&quot;isDelete&quot;:0.0})</code></pre><h3 id="2、文档更新"><a href="#2、文档更新" class="headerlink" title="2、文档更新"></a>2、文档更新</h3><h4 id="1、update-方法-用于更新以存在的文档"><a href="#1、update-方法-用于更新以存在的文档" class="headerlink" title="1、update()方法  用于更新以存在的文档"></a>1、update()方法  用于更新以存在的文档</h4><pre><code>    语法：db.集合名.update(                    query,                    update,                    {                        upset:&lt;boolean&gt;,                        multi:&lt;boolean&gt;,                        writeConcern:&lt;document&gt;                    }                    )参数说明：    query:update的查询条件，类似于sql里的update语句内where后面的内容    update:update的对象和一些更新的操作符($set,$inc等)，$set:直接更新  $inc:在原有基础上累加后更新    upset:可选，如果不存在update的记录，是否当新数据插入，true 为插入，False 为不插入，默认为不插入    multi:可选，mongodb默认是false，只更新找到的第一条记录，如果这个参数为true，就按照条件查找出来的数据全部更新。    writeConcern:可选，抛出异常的级别，示例：db.student.update({name:&quot;jack&quot;},{$set:{age:25}})</code></pre><p>​    如果想让匹配到的内容全部修改：<br>    db.student.update({name:”jack”},{$set:{age:25}}，{multi:true})</p><h4 id="2、save-方法-用过传入的文档替换原来的文档"><a href="#2、save-方法-用过传入的文档替换原来的文档" class="headerlink" title="2、save()方法  用过传入的文档替换原来的文档"></a>2、save()方法  用过传入的文档替换原来的文档</h4><pre><code>语法：db.集合名.save(document,{writeConcern:&lt;document&gt;})参数说明：document：文档数据        writeConcern:可选，抛出异常的级别</code></pre><h3 id="3、文档删除"><a href="#3、文档删除" class="headerlink" title="3、文档删除"></a>3、文档删除</h3><pre><code>在执行remove()函数前，先执行find()命令来判断执行的条件是否存在语法:db.集合名.remove(query,{justOne:&lt;boolean&gt;,writeConcern:&lt;document&gt;})参数说明：query:可选，删除的文档的条件        justOne:可选，如果为true或1，则只删除一个文档示例：db.student.remove({name:&quot;tom&quot;})</code></pre><h3 id="4、文档查询"><a href="#4、文档查询" class="headerlink" title="4、文档查询"></a>4、文档查询</h3><h4 id="1、find-方法-查询集合下所有文档"><a href="#1、find-方法-查询集合下所有文档" class="headerlink" title="1、find()方法  查询集合下所有文档"></a>1、find()方法  查询集合下所有文档</h4><pre><code>db.集合名.find()</code></pre><h4 id="2、find-方法-查询指定列"><a href="#2、find-方法-查询指定列" class="headerlink" title="2、find()方法  查询指定列"></a>2、find()方法  查询指定列</h4><pre><code>db.集合名.find(query,{&lt;key&gt;:1,&lt;key&gt;:1})示例：db.student.find({gender:1.0},{name:1,age:1})参数说明：query:查询条件  可以不写查询条件（即全查） key: 1 表示显示</code></pre><h4 id="3、pretty-方法-以格式化的方式来显示文档"><a href="#3、pretty-方法-以格式化的方式来显示文档" class="headerlink" title="3、pretty()方法 以格式化的方式来显示文档"></a>3、pretty()方法 以格式化的方式来显示文档</h4><pre><code>db.student.find().pretty()</code></pre><h4 id="4、findOne-方法-查询匹配结果的第一条语句"><a href="#4、findOne-方法-查询匹配结果的第一条语句" class="headerlink" title="4、findOne()方法  查询匹配结果的第一条语句"></a>4、findOne()方法  查询匹配结果的第一条语句</h4><pre><code>db.student.findOne({gender:0})</code></pre><h3 id="5、查询条件操作符："><a href="#5、查询条件操作符：" class="headerlink" title="5、查询条件操作符："></a>5、查询条件操作符：</h3><p>作用：条件操作符用于比较两个表达式并从mongodb集合中获取数据<br>    1、大于： $gt<br>        语法: db.集合名.find({<key>:{$gt:<value>}})<br>        示例：db.student.find({age:{$gt:19}})<br>    2、大于等于：  $gte<br>        语法: db.集合名.find({<key>:{$gte:<value>}})<br>    3、小于：  $lt<br>        语法: db.集合名.find({<key>:{$lt:<value>}})<br>    4、小于等于： $lte<br>        语法: db.集合名.find({<key>:{$lte:<value>}})<br>    5、大于等于 和 小于等于：  $gt 和  $lte<br>        语法: db.集合名.find({<key>:{$gte:<value>,$lte:<value>}})<br>    6、等于：   ：<br>    7、使用_id进行查询<br>        语法：db.集合名.find({“_id”:ObjectId(“id值”)})<br>    8、查询某个结果集的数据条数<br>        db.集合名.find().count()<br>    9、查询否个字段的值当中是否包含另一个值<br>        示例：db.集合名.find(name:/ile/)  查询集合中名字是否有包含‘ile’字符的<br>    10、查询某个字段的值是否以另一个值开头<br>        示例：db.集合名.find(name:/^li/)  查询集合中名字是否有以‘li’字符开头的</value></value></key></value></key></value></key></value></key></value></key></p><h3 id="6、条件查询and-和-or"><a href="#6、条件查询and-和-or" class="headerlink" title="6、条件查询and 和 or"></a>6、条件查询and 和 or</h3><h4 id="1、and条件"><a href="#1、and条件" class="headerlink" title="1、and条件"></a>1、and条件</h4><pre><code>语法：db.集合名.find({条件1，条件2，......条件n})</code></pre><h4 id="2、or条件"><a href="#2、or条件" class="headerlink" title="2、or条件"></a>2、or条件</h4><pre><code>语法：db.集合名.find({$or:[{条件1}，{条件2}，......{条件n}]})示例：db.student.find({$or:[{age:17},{age:{$gte:19}}]})      查找年龄为17 或者 年龄的大于19的</code></pre><h4 id="3、and和or联合使用"><a href="#3、and和or联合使用" class="headerlink" title="3、and和or联合使用"></a>3、and和or联合使用</h4><pre><code>语法：db.集合名.find({条件1，条件2，$or:[{条件3，条件4}]})</code></pre><h3 id="7、limit、skip"><a href="#7、limit、skip" class="headerlink" title="7、limit、skip"></a>7、limit、skip</h3><h4 id="1、limit-方法：读取指定数量的数据记录"><a href="#1、limit-方法：读取指定数量的数据记录" class="headerlink" title="1、limit()方法：读取指定数量的数据记录"></a>1、limit()方法：读取指定数量的数据记录</h4><pre><code>示例：db.集合名.find().limit(2)   查看集合里的两条数据</code></pre><h4 id="2、skip-方法：跳过指定数量的数据"><a href="#2、skip-方法：跳过指定数量的数据" class="headerlink" title="2、skip()方法：跳过指定数量的数据"></a>2、skip()方法：跳过指定数量的数据</h4><pre><code>示例：db.集合名.find().skip(2)  跳过两条数据读取下边的其他数据</code></pre><h4 id="3、limit与skip联合使用"><a href="#3、limit与skip联合使用" class="headerlink" title="3、limit与skip联合使用"></a>3、limit与skip联合使用</h4><pre><code>通常用这种方式来实现分页功能 示例：db.集合名.find().skip(2).limit(2)越过两条数据在取两条数据</code></pre><h3 id="8、排序"><a href="#8、排序" class="headerlink" title="8、排序"></a>8、排序</h3><pre><code>语法：db.集合名.find().sort({&lt;key&gt;:1|-1})  1 表示升序  -1表示降序示例：db.集合名.find().sort({age:1})  按年龄升序排</code></pre><script> (function(){     var bp = document.createElement('script');     var curProtocol = window.location.protocol.split(':')[0];     if (curProtocol === 'https'){    bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';   }   else{   bp.src = 'http://push.zhanzhang.baidu.com/push.js';   }     var s = document.getElementsByTagName("script")[0];     s.parentNode.insertBefore(bp, s); })(); </script> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="MongoDB" scheme="http://voicezyx.top/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://voicezyx.top/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客部署在github和coding上 同时推送到两个仓库</title>
    <link href="http://voicezyx.top/Hexo%20github%20coding.html"/>
    <id>http://voicezyx.top/Hexo github coding.html</id>
    <published>2018-09-15T07:05:36.332Z</published>
    <updated>2018-09-15T04:31:26.938Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1、注册coding账号"><a href="#1、注册coding账号" class="headerlink" title="1、注册coding账号"></a>1、注册coding账号</h2><h2 id="2、新建项目"><a href="#2、新建项目" class="headerlink" title="2、新建项目"></a>2、新建项目</h2><p>不选择 <code>启用 README.md 文件初始化项目</code>，以及任何 <code>License</code> 和 <code>.gitignore</code> 文件。</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E5%88%9B%E5%BB%BAcoding%E4%BB%93%E5%BA%93.png" alt=""></p><h2 id="3、从github上克隆项目下来"><a href="#3、从github上克隆项目下来" class="headerlink" title="3、从github上克隆项目下来"></a>3、从github上克隆项目下来</h2><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E5%85%8B%E9%9A%86github%E9%A1%B9%E7%9B%AE.png" alt=""></p><p> 在本地git终端执行：</p><pre><code>git clone https://github.com/xxxxxx/xxxxxx.git --bare   （xxxxxx表示你自己用户名和仓库名）</code></pre><h2 id="4、将克隆下来的仓库推送到-CODING"><a href="#4、将克隆下来的仓库推送到-CODING" class="headerlink" title="4、将克隆下来的仓库推送到 CODING"></a>4、将克隆下来的仓库推送到 CODING</h2><p>克隆完成后，将仓库推送到 CODING 上。<br>使用仓库页面提供的 URL。</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/url.png" alt=""></p><p>在本地创一个coding存放文件的地方（文件夹）</p><p>在此处打开终端：</p><pre><code>git push https://git.coding.net/xxxxxx/xxxxx.git --all    （此处第一个xxxxx表示自己的coding用户名，第二个xxxxx表示自己的仓库名）</code></pre><p>完成后，再执行</p><p>推送所有的标签。</p><p>   git push <a href="https://git.coding.net/xxxxxx/xxxxx.git" target="_blank" rel="noopener">https://git.coding.net/xxxxxx/xxxxx.git</a>  <code>--tags</code></p><p>这样，整个仓库就全部导入到 CODING 中了。</p><h2 id="5、coding部署公钥"><a href="#5、coding部署公钥" class="headerlink" title="5、coding部署公钥"></a>5、coding部署公钥</h2><p>如果是第一次使用coding的话，需要设置SSH公钥，生成的方法可以参考<a href="https://coding.net/help/doc/git/ssh-key.html" target="_blank" rel="noopener">coding帮助中心</a>，我这里直接使用之前部署github时已经生成的公钥。</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E7%A7%98%E9%92%A5.png" alt=""></p><p>打开coding，进入刚才创建的项目，选择设置，部署公钥，把id_rsa里的内容全部复制粘贴到新建公钥里，标题可以不写。</p><p>添加成功后如下图：</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E7%A7%98%E9%92%A5%E6%B7%BB%E5%8A%A0.png" alt=""></p><h2 id="6、检测是否添加成功"><a href="#6、检测是否添加成功" class="headerlink" title="6、检测是否添加成功"></a>6、检测是否添加成功</h2><p>添加后，在<code>git bash</code>命令输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure><p>如果得到下面提示就表示公钥添加成功了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Coding.net Tips : [Hello ! You&apos;ve conected to Coding.net by SSH successfully! ]</span><br></pre></td></tr></table></figure><h2 id="7、同时部署到2个平台"><a href="#7、同时部署到2个平台" class="headerlink" title="7、同时部署到2个平台"></a>7、同时部署到2个平台</h2><p>想要发送文章同时推送到两个仓库中，就要修改博客根目录下面的_config.yml文件中的deploy如下</p><p>根据Hexo官方文档需要修改成下面的形式： （冒号后面需要有一个空格）</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9.png" alt=""></p><h2 id="8、coding上的Pages服务"><a href="#8、coding上的Pages服务" class="headerlink" title="8、coding上的Pages服务"></a>8、coding上的Pages服务</h2><p>分支选择master，因为前面配置的分支是master,因此开启之后，也需要是master。</p><p>如果有自己的域名，可以绑定新的域名</p><p>绑定前请在域名 DNS 设置中添加一条 CNAME 记录指向 xxxxxx.coding.me   </p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E5%9F%9F%E5%90%8D%E6%B7%BB%E5%8A%A0.png" alt=""></p><p> 这样配置结束后，如果没有问题就可以通过访问自己的域名访问了。</p><p>通过gitbash推送文章也会推送到两个仓库中。</p><h2 id="9、推送文章"><a href="#9、推送文章" class="headerlink" title="9、推送文章"></a>9、推送文章</h2><p>推送文章前 hexo g</p><p>hexo d  我的需要输入两次密码 即上传github一次，上传coding一次  最后成功结果如下：</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E6%88%90%E5%8A%9F%E6%95%88%E6%9E%9C.png" alt=""></p><script> (function(){     var bp = document.createElement('script');     var curProtocol = window.location.protocol.split(':')[0];     if (curProtocol === 'https'){    bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';   }   else{   bp.src = 'http://push.zhanzhang.baidu.com/push.js';   }     var s = document.getElementsByTagName("script")[0];     s.parentNode.insertBefore(bp, s); })(); </script> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Hexo" scheme="http://voicezyx.top/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://voicezyx.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Django从头学----学习笔记4</title>
    <link href="http://voicezyx.top/Django%E4%BB%8E%E5%A4%B4%E5%AD%A6----%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04.html"/>
    <id>http://voicezyx.top/Django从头学----学习笔记4.html</id>
    <published>2018-09-15T07:05:36.317Z</published>
    <updated>2018-09-15T04:30:35.972Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、Django与数据库"><a href="#1、Django与数据库" class="headerlink" title="1、Django与数据库"></a>1、Django与数据库</h1><p>Django为各种数据库提供了很好的支持，为这些数据库提供了统一的API，可以根据不同的需求选择不同的数据库。</p><h1 id="2、配置数据库：（如mysql）"><a href="#2、配置数据库：（如mysql）" class="headerlink" title="2、配置数据库：（如mysql）"></a>2、配置数据库：（如mysql）</h1><p>在项目目录下的<strong>init</strong>.py文件中，添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><p>然后修改settings.py文件中的DATABASES为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    'default': &#123;</span><br><span class="line">        'ENGINE': 'django.db.backends.mysql',</span><br><span class="line">        'NAME': 'django',      #数据库名字</span><br><span class="line">        'USER':'root',         #用户名</span><br><span class="line">        'PASSWORD':'123456',   #密码</span><br><span class="line">        'HOST':'localhost',    </span><br><span class="line">        'PORT':'3306',</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、ORM"><a href="#3、ORM" class="headerlink" title="3、ORM"></a>3、ORM</h1><p>对象–关系–映射（极大的减轻了工作量，不需要因为数据库的变更而修改代码）</p><p> 对象关系映射（Object Relational Mapping，简称ORM）模式是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。</p><p>ORM的任务是：</p><p>1、根据对象的类型生成表结构。2、将对象、列表的操作转换为sql语句。3、将sql语句查询到的结果转化为对象、列表。</p><h1 id="4、定义模型"><a href="#4、定义模型" class="headerlink" title="4、定义模型"></a>4、定义模型</h1><p>模型、属性、表、字段间的关系：一个模型类在数据库中对应一张表，在模型类中定义的属性，对应该模型对照表中的一个字段。</p><p>创建模型类 在models.py文件中添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"># Create your models here.</span><br><span class="line">class Grades(models.Model):</span><br><span class="line">    gname    = models.CharField(max_length=20)</span><br><span class="line">    gdate    = models.DateTimeField()</span><br><span class="line">    ggirlnum = models.IntegerField()</span><br><span class="line">    gboynum  = models.IntegerField()</span><br><span class="line">    isDelete = models.BooleanField()</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.gname</span><br><span class="line">class Students(models.Model):</span><br><span class="line">    sname=models.CharField(max_length=20)</span><br><span class="line">    sgender=models.BooleanField(default=True)</span><br><span class="line">    sage=models.IntegerField(db_column='age')</span><br><span class="line">    scontend=models.CharField(max_length=20)</span><br><span class="line">    isDelete=models.BooleanField(default=False)</span><br><span class="line">    #设置关联外键</span><br><span class="line">    sgrade=models.ForeignKey('Grades')</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.sname</span><br><span class="line">    lasttime=models.DateTimeField(auto_now=True)</span><br><span class="line">    createTime=models.DateTimeField(auto_now=True)</span><br></pre></td></tr></table></figure><h1 id="5、元选项：在模型类中定义Meta类，用于设置元信息。"><a href="#5、元选项：在模型类中定义Meta类，用于设置元信息。" class="headerlink" title="5、元选项：在模型类中定义Meta类，用于设置元信息。"></a>5、元选项：在模型类中定义Meta类，用于设置元信息。</h1><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E5%85%83%E9%80%89%E9%A1%B9.png" alt=""></p><p>然后在终端执行python manage.py makemigrations 生成迁移文件，然后执行python manage.py migrate 执行迁移。</p><p>可以看到数据库中的表名被修改成我们自己定义的表名了，myapp_grades没有自己定义就默认命名了。 </p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E8%87%AA%E5%B7%B1%E5%91%BD%E5%90%8D.png" alt=""></p><h1 id="6、模型成员"><a href="#6、模型成员" class="headerlink" title="6、模型成员"></a>6、模型成员</h1><p>类属性：objects是Manager类型的一个对象，作用是与数据库进行交互。当定义模型类是没有指定管理器，则Django为模型创建一个名为objects的管理器。 </p><p>自定义管理器Manager类：模型管理器是Django的模型进行与数据库进项交互的接口，一个模型可以有多个模型管理器。</p><p>作用：向管理器类中添加额外的方法、修改管理器返回的原始查询集（重写get_quertset()方法）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class StudentsManager(models.Manager):</span><br><span class="line">    def get_queryset(self):</span><br><span class="line">        return super(StudentsManager,self).get_queryset().filter(isDelete=False)</span><br></pre></td></tr></table></figure><p>创建对象：（有两种方法）</p><p> 方法1：在模型类中添加一个类方法</p><p>方法2：在定义管理器中添加一个类方法</p><h1 id="7、模型查询"><a href="#7、模型查询" class="headerlink" title="7、模型查询"></a>7、模型查询</h1><p>查询集表示从数据库获取的对象集合。查询集可以有多个过滤器，过滤器就是一个函数，基于所给的参数限制查询的结果。</p><h2 id="返回单个数据"><a href="#返回单个数据" class="headerlink" title="返回单个数据"></a>返回单个数据</h2><p>get（）：返回一个满足条件的对象。如果没有找到符合条件的模型对象，会引发“模型类.DoesNotExist异常”，如果找到多个对象，也会引发“模型类.MutipleObjectReturned异常”</p><p>count（）：返回查询集中的对象个数</p><p>first（）：返回查询集中的第一个对象</p><p>last（）：返回查询集中的最后一个对象</p><p>exists（）：返回查询集中事都有数据，如果有返回True</p><h2 id="限制查询集"><a href="#限制查询集" class="headerlink" title="限制查询集"></a>限制查询集</h2><p>查询返回集列表，可以使用下标的方法进行限制，等同于sql语句中的limit语句。</p><p>例：list=Students.objects.all()[0:5]   #显示前5条学生的信息   （注意下标不能为负数）</p><h2 id="字段查询"><a href="#字段查询" class="headerlink" title="字段查询"></a>字段查询</h2><p>实现了sql中的where语句，作为方法filter（）、exclude（）、get（）的参数</p><p>语法：属性名称__比较运算符=值   </p><p>外键：属性名_id</p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>exact：判断大小写，对大小写敏感                           语法：filter（isDelete=False）</p><p>contains：判断是否包含，对大小写敏感。                </p><p>语法：studentsList=Students.objects.filter(sname__contasins=’张’)</p><p>startswith、endswith：判断是否以value开头、结尾，对大小写敏感    </p><p>语法：studentsList=Students.objects.filter(sname__startswith=’张’)</p><p>前边四个运算符，在前边加上i，就不区分大小写了。</p><p>isnul、isnotnul：判断是否为空。</p><p>in:判断是否包含在范围内。   语法：studentsList=Students.objects.filter(pk__in=[2,4,6,8,10])</p><p>gt：大于  </p><p>gte：大于等于  </p><p>lt：小于 </p><p>lte：小于等于</p><p>语法：studentsList=Students.objects.filter(sage__gt=20)   查找年龄大于20岁的信息。</p><script>(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';    }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Django" scheme="http://voicezyx.top/categories/Django/"/>
    
    
      <category term="Django" scheme="http://voicezyx.top/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django从头学----学习笔记3</title>
    <link href="http://voicezyx.top/Django%E4%BB%8E%E5%A4%B4%E5%AD%A6----%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03.html"/>
    <id>http://voicezyx.top/Django从头学----学习笔记3.html</id>
    <published>2018-09-15T07:05:36.301Z</published>
    <updated>2018-09-15T04:30:15.048Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、视图的基本"><a href="#1、视图的基本" class="headerlink" title="1、视图的基本"></a>1、视图的基本</h1><p>视图对web请求进行回应</p><p>视图就是一个python的函数在views.py中定义</p><p>定义视图：在views.py文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line"></span><br><span class="line">    return HttpResponse(&apos;hello world&apos;)</span><br></pre></td></tr></table></figure><h1 id="2、配置url"><a href="#2、配置url" class="headerlink" title="2、配置url"></a>2、配置url</h1><p>修改project目录下的urls.py文件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url,include</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line"></span><br><span class="line">    url(r&apos;^admin/&apos;, admin.site.urls),      </span><br><span class="line"></span><br><span class="line">    url(r&apos;^&apos;,include(&apos;myApp.urls&apos;)),       #站点后什么都不输入，匹配到myApp.urls.py文件下的url</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在myApp应用目录下创建一个urls.py文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line"></span><br><span class="line">    url(r&apos;^$&apos;,views.index),    #刚才站点后什么都不输入，匹配到这里，然后在调用视图views下的index函数，然后会在站点上显示出来我们需要服务器返回的内容</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="3、模板的基本"><a href="#3、模板的基本" class="headerlink" title="3、模板的基本"></a>3、模板的基本</h1><p>模板是HTML页面，可以根据视图中传递过来的数据进行填充。</p><p>创建模板：在大项目中创建一个templates文件夹，和myApp、project同级，然后在目录下创建对应项目的模板目录（project/templates/myApp）</p><p>配置路径： 修改settings.py文件下的TEMPLATES,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        &apos;BACKEND&apos;: &apos;django.template.backends.django.DjangoTemplates&apos;,</span><br><span class="line">        &apos;DIRS&apos;: [os.path.join(BASE_DIR,&apos;templates&apos;)],</span><br><span class="line">        &apos;APP_DIRS&apos;: True,</span><br></pre></td></tr></table></figure><p> 在刚才创建的模板文件夹下创建grades.html和students.html文件。</p><h1 id="4、例：使通过在站点输入localhost-8000-grades-可以查出班级的视图"><a href="#4、例：使通过在站点输入localhost-8000-grades-可以查出班级的视图" class="headerlink" title="4、例：使通过在站点输入localhost:8000/grades     可以查出班级的视图"></a>4、例：使通过在站点输入localhost:8000/grades     可以查出班级的视图</h1><p>编写grades.html文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>班级信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>班级信息列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;%for grade in grades%&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123;grade.gname&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;%endfor%&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义视图：在views.py文件下定义一个grades函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from .models import Grades,Students</span><br><span class="line">def grades(request):</span><br><span class="line">    #去模板里取数据</span><br><span class="line">    gradesList=Grades.objects.all()</span><br><span class="line">    #将数据传递给模板，模板再渲染页面，将渲染好的额页面返回给浏览器</span><br><span class="line">    return render(request,'myApp/grades.html',&#123;'grades':gradesList&#125;)</span><br></pre></td></tr></table></figure><p>配置url，在myApp\urls.py文件下添加url正则匹配式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url</span><br><span class="line">from . import views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r'^$',views.index),</span><br><span class="line">    url(r'^(\d+)/$',views.detail),   #匹配端口后输入数字时的情况。</span><br><span class="line">    url(r'^grades/$',views.grades)   #匹配端口后输入grades（班级）时的情况。</span><br></pre></td></tr></table></figure><p>这样就可以看到如下情况：</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/grades.png" alt=""></p><script>(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';    }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Django" scheme="http://voicezyx.top/categories/Django/"/>
    
    
      <category term="Django" scheme="http://voicezyx.top/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django从头学----学习笔记2</title>
    <link href="http://voicezyx.top/Django%E4%BB%8E%E5%A4%B4%E5%AD%A6----%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02.html"/>
    <id>http://voicezyx.top/Django从头学----学习笔记2.html</id>
    <published>2018-09-15T06:33:04.240Z</published>
    <updated>2018-09-15T04:30:06.541Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、查看某个对象"><a href="#1、查看某个对象" class="headerlink" title="1、查看某个对象"></a>1、查看某个对象</h1><p>类名.objects.all()   查询全部</p><p>类名.objects.get(pk=2)   括号里表示条件</p><h1 id="2、修改数据"><a href="#2、修改数据" class="headerlink" title="2、修改数据"></a>2、修改数据</h1><p>模型对象.属性=新的值</p><p>例：grade2.gboynum=60</p><p>grade2.save()    #只有执行save（）才会修改数据库里的数据</p><h1 id="3、删除数据"><a href="#3、删除数据" class="headerlink" title="3、删除数据"></a>3、删除数据</h1><p>模型对象.delete()</p><p>例：grade2.delete()          执行完这句，为物理删除，数据库中的表中的数据就直接删除了</p><h1 id="4、关联对象"><a href="#4、关联对象" class="headerlink" title="4、关联对象"></a>4、关联对象</h1><p>grade1=Grades.objects.get(pk=1)</p><p>stu=Students()</p><p>stu.sname=’zyx’</p><p>stu.sgender=False</p><p>stu.sage=20</p><p>stu.scontend=’my name is zyx’</p><p>stu.sgrade=grade1</p><p>获得关联对象的集合：</p><p>对象名.关联的类名_set.all()</p><h1 id="5、启动服务器"><a href="#5、启动服务器" class="headerlink" title="5、启动服务器"></a>5、启动服务器</h1><p>格式：python manage.py runserver ip:port   (ip可以不写，不写代表本地ip；端口号默认是8000)</p><p>这是一个python写的轻量级web服务器，仅在开发测试中使用。</p><p>在网页输入localhost：8000  可以看到界面没有报错   即服务器启动成功</p><h1 id="6、Admin站点管理"><a href="#6、Admin站点管理" class="headerlink" title="6、Admin站点管理"></a>6、Admin站点管理</h1><p>内容发布：负责添加、修改、删除内容</p><h2 id="配置Admin应用"><a href="#配置Admin应用" class="headerlink" title="配置Admin应用"></a>配置Admin应用</h2><p>在settings.py文件中的INSTALLEN_APPS中添加’django.contrib.admin’，默认是添加过的。</p><h2 id="设置管理员账号和密码"><a href="#设置管理员账号和密码" class="headerlink" title="设置管理员账号和密码"></a>设置管理员账号和密码</h2><p>在终端输入：python manage.py creatsuperuser       根据提示输入用户名、邮箱、密码</p><p>在浏览器输入：<a href="http://localhost:8000/admin/" target="_blank" rel="noopener">http://localhost:8000/admin/</a>   进入管理员界面</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E7%AE%A1%E7%90%86%E5%91%98%E7%95%8C%E9%9D%A2.png" alt=""></p><h2 id="管理数据表"><a href="#管理数据表" class="headerlink" title="管理数据表"></a>管理数据表</h2><p>修改admin.py文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .models import Grades,Students</span><br><span class="line">#注册</span><br><span class="line">admin.site.register(Grades)</span><br><span class="line">admin.site.register(Students)</span><br></pre></td></tr></table></figure><p>这样可以在浏览器看到如下情况：</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE%E8%A1%A8.png" alt=""></p><h2 id="列表页属性"><a href="#列表页属性" class="headerlink" title="列表页属性"></a>列表页属性</h2><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E5%88%97%E8%A1%A8%E9%A1%B5%E5%B1%9E%E6%80%A7.png" alt=""></p><p>站点情况：</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E7%AB%99%E7%82%B9%E6%83%85%E5%86%B51.png" alt=""></p><h2 id="修改页属性"><a href="#修改页属性" class="headerlink" title="修改页属性"></a>修改页属性</h2><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E4%BF%AE%E6%94%B9%E9%A1%B5%E5%B1%9E%E6%80%A7.png" alt=""></p><p> 站点情况：</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E7%AB%99%E7%82%B9%E6%83%85%E5%86%B52.png" alt=""></p><p><strong>注意：fields 与fieldsets 不可以同时使用！！！</strong></p><script>(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';    }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Django" scheme="http://voicezyx.top/categories/Django/"/>
    
    
      <category term="Django" scheme="http://voicezyx.top/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django从头学----学习笔记1（创建项目，添加数据）</title>
    <link href="http://voicezyx.top/Django%E4%BB%8E%E5%A4%B4%E5%AD%A6----%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01.html"/>
    <id>http://voicezyx.top/Django从头学----学习笔记1.html</id>
    <published>2018-09-15T04:47:34.329Z</published>
    <updated>2018-09-15T06:15:13.106Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、MVT"><a href="#1、MVT" class="headerlink" title="1、MVT"></a>1、MVT</h1><ul><li>Django是一款python的web开发框架</li><li>与MVC有所不同，属于MVT框架</li><li>m表示model，负责与数据库交互</li><li>v 表示view，是核心，负责接收请求、获取数据、返回结果</li><li>t 表示template，负责呈现内容到浏览器</li></ul><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/MVT%E6%A8%A1%E5%9E%8B.png" alt=""></p><h1 id="2、安装Django"><a href="#2、安装Django" class="headerlink" title="2、安装Django"></a>2、安装Django</h1><p>在windows终端输入：pip install Django==1.11.4（如果不输入等号后边的，默认安装最新版本）</p><h1 id="3、创建项目"><a href="#3、创建项目" class="headerlink" title="3、创建项目"></a>3、创建项目</h1><p>在合适位置创建一个目录</p><p>在黑屏终端进入目录下</p><p>输入：django-admin startproject project          project表示创建的项目名字，可以改成自己的项目名字</p><p>创建成功后可以查看创建出来的项目文件   tree . /F    (中间有空格)</p><p> <img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/tree.png" alt=""></p><p>manage.py  一个命令行工具，可以使我们用多种方式对Django项目进行交互</p><p><strong>init</strong>.py  一个空文件，它告诉python这个目录应该被看做一个python包</p><p>settings.py  项目的配置文件</p><p>urls.py  项目的URL声明</p><p>wsgi.py 项目与WSGI兼容的Web服务器入口</p><h1 id="4、基本操作"><a href="#4、基本操作" class="headerlink" title="4、基本操作"></a>4、基本操作</h1><h2 id="1、设计表结构"><a href="#1、设计表结构" class="headerlink" title="1、设计表结构"></a>1、设计表结构</h2><h2 id="2、配置数据库：Django默认使用的是SQLite数据库"><a href="#2、配置数据库：Django默认使用的是SQLite数据库" class="headerlink" title="2、配置数据库：Django默认使用的是SQLite数据库"></a>2、配置数据库：Django默认使用的是SQLite数据库</h2><p>在settings.py中，通过DATABASES选项进行数据库配置，配置成mysql。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;test&apos;, 数据库名</span><br><span class="line">        &apos;USER&apos;:&apos;root&apos;, </span><br><span class="line">        &apos;PASSWORD&apos;:&apos;123456&apos;,</span><br><span class="line">        &apos;HOST&apos;:&apos;localhost&apos;,</span><br><span class="line">        &apos;PORT&apos;:&apos;3306&apos;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<strong>init</strong>.py 文件中添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h2 id="3、创建应用"><a href="#3、创建应用" class="headerlink" title="3、创建应用"></a>3、创建应用</h2><p>在一个项目中可以创建多个应用，每个应用进行一种业务</p><p>打开终端，进入项目目录下的project</p><p>执行：python manage.py startapp myApp（myApp是自己起的名字）</p><p>创建成功后会出现一个myApp文件。</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/myApp.png" alt=""></p><h2 id="4、激活应用"><a href="#4、激活应用" class="headerlink" title="4、激活应用"></a>4、激活应用</h2><p>在settings.py文件中，将myApp应用加入到INSTALLED_APPS选项中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;myApp&apos;   #添加的自己的应用</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="5、定义模型"><a href="#5、定义模型" class="headerlink" title="5、定义模型"></a>5、定义模型</h1><p>有一个数据表，就对应一个模型。在models.py文件中定义模型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"># Create your models here.</span><br><span class="line">class Grades(models.Model):</span><br><span class="line">    gname    = models.CharField(max_length=20)</span><br><span class="line">    gdate    = models.DateTimeField()</span><br><span class="line">    ggirlnum = models.IntegerField()</span><br><span class="line">    gboynum  = models.IntegerField()</span><br><span class="line">    isDelete = models.BooleanField()</span><br><span class="line">class Students(models.Model):</span><br><span class="line">    sname=models.CharField(max_length=20)</span><br><span class="line">    sgender=models.BooleanField(default=True)</span><br><span class="line">    sage=models.IntegerField()</span><br><span class="line">    scontend=models.CharField(max_length=20)</span><br><span class="line">    isDelete=models.BooleanField(default=False)</span><br><span class="line">    #设置关联外键</span><br><span class="line">    sgrade=models.ForeignKey(&apos;Grades&apos;)</span><br></pre></td></tr></table></figure><h1 id="6、在数据库中生成数据表"><a href="#6、在数据库中生成数据表" class="headerlink" title="6、在数据库中生成数据表"></a>6、在数据库中生成数据表</h1><h2 id="1、生成迁移文件"><a href="#1、生成迁移文件" class="headerlink" title="1、生成迁移文件"></a>1、生成迁移文件</h2><pre><code>在项目下的黑屏终端执行  python manage.py   makemigrations</code></pre><p>执行结束后 后在项目中migrations下生成一个迁移文件，即0001_inital.py。（此时数据库中还没有生成数据表）</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E7%94%9F%E6%88%90%E8%BF%81%E7%A7%BB%E6%96%87%E4%BB%B6.png" alt=""></p><h2 id="2、执行迁移"><a href="#2、执行迁移" class="headerlink" title="2、执行迁移"></a>2、执行迁移</h2><pre><code>执行 ：python manage.py migrate  相当于执行sql语句创建表，完成后可以到数据库中能够查看生成的表</code></pre><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E6%89%A7%E8%A1%8C%E8%BF%81%E7%A7%BB.png" alt=""></p><h2 id="3、测试数据操作"><a href="#3、测试数据操作" class="headerlink" title="3、测试数据操作"></a>3、测试数据操作</h2><p>进入终端，执行:python manage.py shell</p><p> 引入包  </p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E6%89%A7%E8%A1%8C%E8%BF%81%E7%A7%BB.png" alt=""></p><p>from myApp.models import Grades,Students          （Grades,Students是我创建的两个表）</p><p>from django.utils import timezone</p><p>from datetime import *</p><p> 查询所有数据 :  类名.objects.all()</p><p>Grades.objects.all（）</p><h2 id="4、添加数据"><a href="#4、添加数据" class="headerlink" title="4、添加数据"></a>4、添加数据</h2><p>grade1=Grades()</p><p>grade1.gname=’zyx’</p><p>grade1.gdate=datetime(year=2018,month=8,day=1)</p><p>grade1.ggirlnum=10</p><p>grade1.gboynum=40</p><p>grade1.save()     只有save（）后数据库中才会有数据</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE.png" alt=""></p><p>这样数据保存成功，数据库中也会有数据了。</p><p><img src="https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE%E6%88%90%E5%8A%9F.png" alt=""></p><script>(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';    }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Django" scheme="http://voicezyx.top/categories/Django/"/>
    
    
      <category term="Django" scheme="http://voicezyx.top/tags/Django/"/>
    
  </entry>
  
</feed>
