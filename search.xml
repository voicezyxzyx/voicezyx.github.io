<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[sql基本知识与函数学习]]></title>
    <url>%2Fsql%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%B8%8E%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0.html</url>
    <content type="text"><![CDATA[1、创建表create table student( ID INT PRIMARY KEY NOT NULL, NAME VARCHAR(10) NOT NULL, AGE INT NOT NULL) 2、修改表/alter table dbo.userinfoalter column username varchar(100) alter table dbo.userinfoalter column age float alter table dbo.userinfoalter column username float not null alter table dbo.userinfoadd constraint KID primary key (ID) update dbo.userinfo set ID=5 where ID=4 delete dbo.userinfo where ID=5 /增加一个grade字段/alter table dbo.userinfoadd grade varchar (10) not null 3、删除表drop table userinfo create table userinfo( ID int primary key not null, username varchar(10) not null, age int not null) 4、向表中插入多个数据insert into “userinfo”(“ID”,”username”,”age”)values(3,’asc’,33),(4,’nvs’,23) 5、查询出不重复的数据select distinct ID FROM userinfo 6、常用函数介绍6.1、top函数查询在前多少个的数据select top 50 * FROM userinfo 6.2、IN()函数查询符合IN括号里边范围的数据select * from dbo.userinfo where ID IN(2,3,5) 6.3、Exists()函数联合查询SELECT ID,USERNAME,AGE FROM dbo.userinfo AS AWHERE EXISTS (SELECT * FROM dbo.MovieDBs as b WHERE A.ID=b.ID) 6.4、order by排序 asc是升序，不输入默认为升序，desc为降序/select * from dbo.userinfo order by ID desc 6.5、avg()查询平均值 select avg(age) from dbo.userinfo 6.6、sum()查询和select sum(age) from dbo.userinfo 6.7、将字段进行连接select grade+’_’+class from dbo.userinfo 6.8、datalength()查询数据的长度select datalength(username) from dbo.userinfo 6.9、floor（）函数、celing（）函数floor()函数 向下取整 celling（）函数 向上取整 rand()函数 输出一个0-1之间的随机小数 12select floor(RAND()100)select ceiling(RAND()100) 6.10、GETDATE() GETUTCDATE()/返回当前数据库系统时间，返回值的类型是datetime/ 1select GETDATE() /返回当前国际标准时间值，返回值的类型是datetime/ 1select GETUTCDATE() /Convert函数 把日期转换为新的显示类型 / 1SELECT CONVERT(VARCHAR(10),GETDATE(),111) 6.11、datediff()函数返回两个日期之间的天数/ 12select DATEDIFF(DAY,&apos;2017-10-1&apos;,&apos;2018-10-3&apos;)select DATEDIFF(MONTH,&apos;2017-10-1&apos;,&apos;2018-10-3&apos;) /在指定时间基础上增减时间，返回增减后的新时间/ 12select DATEADD(DAY,5,&apos;2019-5-1&apos;) /在2019年5月1日基础上加上五天/select DATEADD(MINUTE,30,&apos;2019-5-1 12:00:00&apos;) /在2019年5月1日 12:00:00基础上加上30分钟/ 6.12、DATEPART()函数 DATENAME 函数用于返回日期、时间的单独部分，比如年、月、日、小时、分钟等，返回值是int整形 123select DATEPART(YEAR,GETDATE()) /返回系统当前时间中的年份数字/select DATEPART(MONTH,GETDATE()) /返回系统当前时间中的月份数字/select DATEPART(DAY,GETDATE()) DATENAME 函数 用于返回日期、时间的单独部分，返回数类型是varchar类型/ 1select DATENAME(MINUTE,GETDATE()) /返回当前系统时间的分钟数/ 6.13、charindex()函数查找字符串中有没有指定的字符，返回查找到的下标/ 12select CHARINDEX(&apos;cc&apos;,&apos;aabbccdd&apos;) /返回5/select CHARINDEX(&apos;cc&apos;,&apos;aabbccdd&apos;,6) /6表示从第6位开始查找，此查询返回0，表示没有查到/ 6.14、stuff()函数用于删除指定长度的字符，病可以在指定的起点处插入另一组字符，返回类型是一个字符串型/ 12/select STUFF(列名，开始位置，长度，替代字符串)/select STUFF(&apos;aabbccdd&apos;,5,2,&apos;&apos;) /使用空字符替换cc的位置/ 6.15、SUBSTRING()函数 LEFT()函数 RIGHT()函数 LTRIM()函数 RTRIM()函数截取指定长度的字符串/ 12/SUBSTRING(exprsssion,start,length)/select SUBSTRING(&apos;ASDADJLAKSDKLAS&apos;,3,6)/从字符串第三位开始截取，截取6位，然后返回结果/ /LEFT()函数 返回字符串汇中从左边开始指定个数的字符RIGHT()函数 返回字符串冲右边开始指定个数的字符/ 12select LEFT(&apos;ASAHSDKJAS&apos;,6)/从最左边开始，然后返回6位/select RIGHT(&apos;ASAHSDKJAS&apos;,6)/从最右边开始，然后返回最后6位/ /LTRIM()函数 删除字符串左边的空格后返回RTRIM()函数 删除字符串右边的空格后返回/ 12select LTRIM(&apos; SAJ JKJASD &apos;)select RTRIM(&apos; SAJJKJASD &apos;) 6.16、UPPER()函数 LOWER()函数/UPPER()函数 将小写字符数据转化为大写的LOWER()函数 将大写字符数据转换为小写/ 12select UPPER(&apos;asjCLAKSlcak&apos;)select LOWER(&apos;ashADHAJASXAAXLKAcan&apos;) 6.17、REPLACE()函数 REPLICATE()函数用另一个字符串值替换出现的所有字符串值/ 1select REPLACE(&apos;asdasddavsj&apos;,&apos;das&apos;,&apos;zzzz&apos;) /第一个字符串是整个字符串，第二个是要替换的字符串，第三个是准备替换成的字符串/ /REPLICATE()函数 指定字符串输出指定次数/ 1select REPLICATE(&apos;ABC&apos;,5) 6.18、REVERSE()函数用于倒置字符串中的字符,即倒序输出/ 1select REVERSE(&apos;abcdefg&apos;) 6.19、CAST()函数用于将某种数据类型的表达式显式的转换为另一种数据类型/ 12select CAST(&apos;1234&apos; as varchar)select &apos;abc&apos;+CAST(&apos;1234&apos; as varchar) /把1234转换为字符串类型就可以与‘abc进行连接’/ /CASE()函数 有两种格式，一个是简单case（）函数，一种是case（）搜索函数//简单case函数/ 1select , case sex when &apos;男&apos; then &apos;man&apos; when &apos;女&apos; then &apos;women&apos; end from userinfo case搜索函数 1234567select , case when score&gt;90 then &apos;优&apos; when score&gt;80 and score&lt;90 then &apos;良&apos;when score&gt;70 and score&lt;80 then &apos;中&apos;when score&lt;60 then &apos;差&apos; endfrom stu.score; 7、视图视图是被存储在数据库中的预写查询。视图是由一个SELECT语句，运行视图后，会看到一个视图可以将多个表的数据汇总在一起并将显示，就好像它是一个单一的表。 视图是永远不会自己消失的除非你删除它。视图有时会对提高效率有帮助。临时表几乎是不会对性能有帮助，是资源消耗者。视图一般随该数据库存放在一起，临时表永远都是在tempdb里的。 视图适合于多表连接浏览时使用。不适合增、删、改。存储过程适合于使用较频繁的SQL语句，这样可以提高执行效率! 7、1、视图和表的区别和联系7.1.1、区别（1）视图没有实际的物理记录，而表有。（2）表中存储的是内容，视图是显示窗口。（3）视图只是逻辑概念的存在，表可以及时对它进行修改，但视图只能有创建的语句来修改。（4）表是内模式，视图是外模式。（5）视图是查看数据表的一种方法，可以查询数据表中某些字段构成的数据，只是一些SQL语句的集合。从安全的角度说，视图可以不给用户接触数据表，从而不知道表结构。（6）视图的建立和删除只影响视图本身，不影响对应的基本表。（7）不能对视图进行update或者insert into操作。 7.1.2、联系视图（view）是在基本表之上建立的表，它的结构（即所定义的列）和内容（即所有数据行）都来自基本表，它依据基本表存在而存在。一个视图可以对应一个基本表，也可以对应多个基本表。视图是基本表的抽象和在逻辑意义上建立的新关系。 7.2、创建视图例、 1234CREATE VIEW CUSTOMERS_VIEW ASSELECT name, ageFROM CUSTOMERSWHERE age IS NOT NULL 7.3、更新视图123UPDATE CUSTOMERS_VIEW SET AGE = 35 WHERE name=&apos;Ramesh&apos;; 7.4、删除视图中的某条数据12DELETE FROM CUSTOMERS_VIEW WHERE age = 22; 7.5、删除视图1DROP VIEW view_name; view_name 表示之前创建视图的名字。 (function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https') { bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else { bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s); })();]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在局域网中查看Django开发的网站]]></title>
    <url>%2F%E5%9C%A8%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%AD%E6%9F%A5%E7%9C%8BDjango%E5%BC%80%E5%8F%91%E7%9A%84%E7%BD%91%E7%AB%99.html</url>
    <content type="text"><![CDATA[Django是开发网站与信息系统的利器，可以通过局域网查看，也可以部署到服务器绑定域名通过外网查看，这次先实现项目通过局域网查看。 步骤： 1.在项目的settings.py文件中，找到ALLOWED_HOSTS=[ ]，在中括号中加入你电脑所在局域网中的IP。我的IP为192.168.0.100，所以设置如图所示： 2.指令：python manage.py runserver 192.168.0.100:8000 这样就可以让局域网中的电脑访问了，我的主机地址是192.168.0.100，所以在浏览器中输入http://192.168.0.100:8000 就可以访问了。 3、这样设置了局域网访问后，手机连着相同的局域网，在浏览器输入指定的IP和端口，也可以进行访问。 4、如果局域网不能访问，则尝试关闭电脑防火墙。 原文链接：https://blog.csdn.net/yangmingqian/article/details/54691598 (function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https'){ bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else{ bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s); })();]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git简单的基本操作]]></title>
    <url>%2FGit%E7%AE%80%E5%8D%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html</url>
    <content type="text"><![CDATA[初始化仓库 git init 添加文件 git add readme.txt 提交文件 git commit -m “xxxxxxx”(xxxxxx表示提交的说明文字) 查看当前结果状态 git status 查看修改前后的不同之处 git diff 查看操作历史记录 git log 回退到之前的版本 git reset –hard ‘填写之前的版本号’ 如：$ git reset –hard 1094a 查看文件内容(cat) 如：cat readme.txt 如果想回退之前的版本，但是之前的版本id忘记了，可以用git reflog查看之前的每一次命令，从而查看想回退到版本的id 场景1：当改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 git checkout – file。 场景2：当不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 git reset HEAD ，就回到了场景1，第二步按场景1操作。 删除文件 rm test.txt 如确实需要从版本库中删除该文件，就用git rm 删除然后使用git commit 提交 如果是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：$ git checkout – test.txt 创建分支与合并分支 查看分支 git branch $ git checkout -b dev 表示创建并切换，相当于以下两条命令：1、$ git branch dev 2、$ git checkout dev git merge dev 合并分支 ——-在master下执行此命令是将dev下的工作结果合并到master分支上。 切换分支：git checkout 删除分支 git branch -d 解决提交冲突 当Git无法自动合并分支时，要先解决冲突，再提交，可以通过git log 查看记录日志，然后进行修改。 Bug分支，暂存工作区，修复bug后恢复工作区 git stash 暂存工作区 修复完其他问题后，使用git stash list 查看暂存的工作，然后可以采用git stash pop 来恢复工作区，如果中途暂存有好几个工作区，可以使用 git stash apply stash@｛？｝，这样就还可以恢复到指定工作现场。 如果要丢弃一个没有被合并过的分支，可以通过git branch -D &lt;name&gt;强行删除。 标签（tag） git tag &lt;name&gt;就可以打一个新标签 git tag 查看所有标签 要给之前commit提交的打上标签，就可以输入对应的commit id就可以，如：git tag v1.0 f52c633 标签不是按照时间顺序排的，是按照字母顺序排的。 可以用git show &lt;tagname&gt;查看标签信 还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字： $ git tag -a v0.1 -m “version 0.1 released” 1094adb git push origin &lt;tagname&gt;可以推送一个本地标签； 命令git push origin --tags可以推送全部未推送过的本地标签； 命令git tag -d &lt;tagname&gt;可以删除一个本地标签； 命令git push origin :refs/tags/&lt;tagname&gt;可以删除一个远程标签。 (function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https'){ bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else{ bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s); })();]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git简单的基本操作]]></title>
    <url>%2Ftest.html</url>
    <content type="text"><![CDATA[初始化仓库 git init 添加文件 git add readme.txt 提交文件 git commit -m “xxxxxxx”(xxxxxx表示提交的说明文字) 查看当前结果状态 git status 查看修改前后的不同之处 git diff 查看操作历史记录 git log 回退到之前的版本 git reset –hard ‘填写之前的版本号’ 如：$ git reset –hard 1094a 查看文件内容(cat) 如：cat readme.txt 如果想回退之前的版本，但是之前的版本id忘记了，可以用git reflog查看之前的每一次命令，从而查看想回退到版本的id 场景1：当改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 git checkout – file。 场景2：当不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 git reset HEAD ，就回到了场景1，第二步按场景1操作。 删除文件 rm test.txt 如确实需要从版本库中删除该文件，就用git rm 删除然后使用git commit 提交 如果是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：$ git checkout – test.txt 创建分支与合并分支 查看分支 git branch $ git checkout -b dev 表示创建并切换，相当于以下两条命令：1、$ git branch dev 2、$ git checkout dev git merge dev 合并分支 ——-在master下执行此命令是将dev下的工作结果合并到master分支上。 切换分支：git checkout 删除分支 git branch -d 解决提交冲突 当Git无法自动合并分支时，要先解决冲突，再提交，可以通过git log 查看记录日志，然后进行修改。 Bug分支，暂存工作区，修复bug后恢复工作区 git stash 暂存工作区 修复完其他问题后，使用git stash list 查看暂存的工作，然后可以采用git stash pop 来恢复工作区，如果中途暂存有好几个工作区，可以使用 git stash apply stash@｛？｝，这样就还可以恢复到指定工作现场。 如果要丢弃一个没有被合并过的分支，可以通过git branch -D &lt;name&gt;强行删除。 标签（tag） git tag &lt;name&gt;就可以打一个新标签 git tag 查看所有标签 要给之前commit提交的打上标签，就可以输入对应的commit id就可以，如：git tag v1.0 f52c633 标签不是按照时间顺序排的，是按照字母顺序排的。 可以用git show &lt;tagname&gt;查看标签信 还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字： $ git tag -a v0.1 -m “version 0.1 released” 1094adb git push origin &lt;tagname&gt;可以推送一个本地标签； 命令git push origin --tags可以推送全部未推送过的本地标签； 命令git tag -d &lt;tagname&gt;可以删除一个本地标签； 命令git push origin :refs/tags/&lt;tagname&gt;可以删除一个远程标签。 (function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https'){ bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else{ bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s); })();]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java实现排序算法（冒泡排序、选择排序、插入排序、二分查找排序）]]></title>
    <url>%2FJava%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E3%80%81%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E3%80%81%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E3%80%81%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%8E%92%E5%BA%8F%EF%BC%89.html</url>
    <content type="text"><![CDATA[1、冒泡排序12345678910111213141516171819//冒泡排序package 排序算法;public class Test &#123; public static void main(String[] args) &#123; int[] nums=&#123;34,4,56,17,90,65&#125;; for(int i=0;i&lt;nums.length-1;i++)&#123; for(int j=0;j&lt;nums.length-1-i;j++)&#123; //比较轮数等于数列的长度-1 if(nums[j]&gt;nums[j+1])&#123; nums[j]=nums[j]+nums[j+1]; nums[j+1]=nums[j]-nums[j+1]; nums[j]=nums[j]-nums[j+1]; &#125; &#125; &#125; for (int x:nums)&#123; System.out.println(x); &#125; &#125;&#125; 2、选择排序12345678910111213141516171819202122232425//选择排序算法package 排序算法;public class Test2 &#123; public static void main(String[] args) &#123; int[] nums=&#123;34,4,56,17,90,65&#125;; int minIndex=0;//用来记录每次比较的最小值下标 for (int i=0;i&lt;nums.length;i++)&#123; minIndex=i; //每轮假设一个最小值下标 for(int j=i+1;j&lt;nums.length;j++)&#123; if(nums[minIndex]&gt;nums[j])&#123; minIndex=j; &#125; &#125; //判断需要交换的数下标是否为自己 if (minIndex!=i)&#123; nums[minIndex]=nums[minIndex]+nums[i]; nums[i]=nums[minIndex]-nums[i]; nums[minIndex]=nums[minIndex]-nums[i]; &#125; &#125; for (int n:nums)&#123; System.out.println(n); &#125; &#125;&#125; 3、插入排序//插入排序算法 package 排序算法; public class Test3 { public static void main(String[] args){ int[] nums={34,4,56,17,90,65}; for (int i=1;i&lt;nums.length;i++){ int temp=nums[i]; int j=0; for(j=i-1;j&gt;=0;j--){ if (nums[j]&gt;temp){ nums[j+1]=nums[j]; }else { break; } } if (nums[j+1]!=temp){ nums[j+1]=temp; } } for (int x:nums){ System.out.println(x); } } } 4、二分查找排序123456789package 排序算法;import java.util.*;public class Test4&#123; public static void main(String[] args)&#123; int[] num=&#123;10,20,50,65,86,90&#125;; int index=Arrays.binarySearch(num, 10); System.out.println(&quot;找到的数字下标是：&quot;+index); &#125;&#125; 12345678910111213141516171819202122232425262728//二分查找算法（折半查找）package 排序算法;import java.util.Scanner;;public class Test4 &#123; public static void main(String[] args)&#123; //必须保证数列是有序的 int[] num = &#123;10,20,50,65,86,90&#125;; int index=binarySearch(num, 22); System.out.println(index); &#125; //二分查找 public static int binarySearch(int[] num,int key)&#123; int start=0; //开始下标 int end=num.length-1; //结束下标 while(start&lt;=end)&#123; int mid=(start+end)/2; if(num[mid]&gt;key)&#123; end=mid-1; &#125;else if (num[mid]&lt;key) &#123; start=mid+1; &#125;else &#123; return mid; &#125; &#125; return -1; &#125;&#125; (function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https'){ bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else{ bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s); })();]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>数组排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo添加点击爆炸效果 duang duang duang]]></title>
    <url>%2Fhexo%E6%B7%BB%E5%8A%A0%E7%82%B9%E5%87%BB%E7%88%86%E7%82%B8%E6%95%88%E6%9E%9C.html</url>
    <content type="text"><![CDATA[首先在themes/next/source/js/src里面建一个叫fireworks.js的文件，代码如下： 1&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;; 打开themes/next/layout/_layout.swig,在&lt;/body&gt;上面写下如下代码： 12345&#123;% if theme.fireworks %&#125; &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/fireworks.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125; 打开主题配置文件，在里面最后写下： 12# Fireworksfireworks: true 作者：Moorez 链接：https://www.jianshu.com/p/f054333ac9e6 來源：简书 (function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https'){ bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else{ bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s); })();]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django从头学----学习笔记1（创建项目，添加数据）]]></title>
    <url>%2FDjango%E4%BB%8E%E5%A4%B4%E5%AD%A6----%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01.html</url>
    <content type="text"><![CDATA[1、MVT Django是一款python的web开发框架 与MVC有所不同，属于MVT框架 m表示model，负责与数据库交互 v 表示view，是核心，负责接收请求、获取数据、返回结果 t 表示template，负责呈现内容到浏览器 2、安装Django在windows终端输入：pip install Django==1.11.4（如果不输入等号后边的，默认安装最新版本） 3、创建项目在合适位置创建一个目录 在黑屏终端进入目录下 输入：django-admin startproject project project表示创建的项目名字，可以改成自己的项目名字 创建成功后可以查看创建出来的项目文件 tree . /F (中间有空格) manage.py 一个命令行工具，可以使我们用多种方式对Django项目进行交互 init.py 一个空文件，它告诉python这个目录应该被看做一个python包 settings.py 项目的配置文件 urls.py 项目的URL声明 wsgi.py 项目与WSGI兼容的Web服务器入口 4、基本操作1、设计表结构2、配置数据库：Django默认使用的是SQLite数据库在settings.py中，通过DATABASES选项进行数据库配置，配置成mysql。 12345678910DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;test&apos;, 数据库名 &apos;USER&apos;:&apos;root&apos;, &apos;PASSWORD&apos;:&apos;123456&apos;, &apos;HOST&apos;:&apos;localhost&apos;, &apos;PORT&apos;:&apos;3306&apos;, &#125;&#125; 在init.py 文件中添加如下代码： 12import pymysqlpymysql.install_as_MySQLdb() 3、创建应用在一个项目中可以创建多个应用，每个应用进行一种业务 打开终端，进入项目目录下的project 执行：python manage.py startapp myApp（myApp是自己起的名字） 创建成功后会出现一个myApp文件。 4、激活应用在settings.py文件中，将myApp应用加入到INSTALLED_APPS选项中 123456789INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;myApp&apos; #添加的自己的应用] 5、定义模型有一个数据表，就对应一个模型。在models.py文件中定义模型 12345678910111213141516from django.db import models# Create your models here.class Grades(models.Model): gname = models.CharField(max_length=20) gdate = models.DateTimeField() ggirlnum = models.IntegerField() gboynum = models.IntegerField() isDelete = models.BooleanField()class Students(models.Model): sname=models.CharField(max_length=20) sgender=models.BooleanField(default=True) sage=models.IntegerField() scontend=models.CharField(max_length=20) isDelete=models.BooleanField(default=False) #设置关联外键 sgrade=models.ForeignKey(&apos;Grades&apos;) 6、在数据库中生成数据表1、生成迁移文件在项目下的黑屏终端执行 python manage.py makemigrations 执行结束后 后在项目中migrations下生成一个迁移文件，即0001_inital.py。（此时数据库中还没有生成数据表） 2、执行迁移执行 ：python manage.py migrate 相当于执行sql语句创建表，完成后可以到数据库中能够查看生成的表 3、测试数据操作进入终端，执行:python manage.py shell 引入包 from myApp.models import Grades,Students （Grades,Students是我创建的两个表） from django.utils import timezone from datetime import * 查询所有数据 : 类名.objects.all() Grades.objects.all（） 4、添加数据grade1=Grades() grade1.gname=’zyx’ grade1.gdate=datetime(year=2018,month=8,day=1) grade1.ggirlnum=10 grade1.gboynum=40 grade1.save() 只有save（）后数据库中才会有数据 这样数据保存成功，数据库中也会有数据了。 (function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https') { bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else { bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s); })();]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[字典和列表]]></title>
    <url>%2F%E5%AD%97%E5%85%B8%E4%B8%8E%E5%88%97%E8%A1%A8.html</url>
    <content type="text"><![CDATA[1、字典dictionary 字典，是除列表以外,python中最灵活的数据类型。字典可以存储多个数据，存储相关的信息 字典的定义格式:dict = {key:value,key:value} 字典使用键值对存储数据，键值对键名和键值 键名 key 就是键索引 键值 value 是数据 键名和键值之间用: 值可以是任何类型,键名只能是字符串，数字，元组 字典和列表的区别列表是有序的集合 下标是从0开始的正整数 字典是无序的集合 ,通过键名来访问数据 2、使用键访问字典的值# 定义一个字典类型dict ={ “name”:”xxx”, “edu”:”本科”, “age”:18, “marry”:True}# 取出字典中的某个元素的值 Dict[‘age’]print(dict[‘name’])print(dict[‘edu’])print(dict[‘age’])print(dict[‘marry’]) 3、字典的操作，增加 、删除 ，修改 1 增加 字典[键] =数据 键不存在，会添加键值对；键存在，会修改键值对的值 2 删除 字典.pop(键) 删除指定键值对,返回被删除的值 字典.clear 清空字典 3 修改 字典[键]=数据 键不存在，会添加键值对；键存在，会修改键值对的值 4 查询 字典[键] 根据键的取值，键值对不存在会报错 字典.keys() 可以进行遍历，获取所有的键名 字典.values() 可以进行遍历，获取索引的键值 字典.items() 可以进行遍历，获取所有的（键,值）键值对 默认获取的是键名 使用for字典的遍历默认是键名 遍历键名和键值 12345678910111213141516171819202122dicts =&#123;&quot;names&quot;:&quot;张三&quot;,&quot;ages&quot;:30,&quot;sex&quot;:&quot;男&quot;&#125;# 键值对for obj in dicts.items(): print(obj)# 结果是(&apos;names&apos;, &apos;张三&apos;)(&apos;ages&apos;, 30)(&apos;sex&apos;, &apos;男&apos;)# 键和值for k,v in dicts.items(): print(&quot;键是%s 值是%s&quot;%(k,v))#得到键值for v in dicts.values():# print(v)#遍历 默认是键名for k in dicts: print(k)#遍历字典中的键名for k in dicts.keys(): # 键名 print(k) 4、列表(重点)列表的基本格式 list (列表) 是python中使用最频繁的数据类型 专门用来存储一串数据，存储的数据 称之为 元素 通常放的是同类型 列表的索引（下标）从 0开始的 正整数 0 1 2 3 4 5 6 7 有序的 例如： [10,20,30,40,50,60] 统一的类型 [“张三”,”李四”,”王五”] 统一的类型 格式 [元素1,元素2,元素3,元素4,元素5] [10,20,30] 列表的索引（下标） 从0开始的正整数 0,1,2,3,4…. 例如： 获取列表中的某个元素name_list = [‘柳’,’张’,’关’] # 取出列表中的元素值 print(name_list[0]) print(name_list[1]) print(name_list[2]) 注意;取值的时候，如果超出索引的范围，程序就会报错 5、列表的常见操作 1 增加 列表.append(数据) 在末尾追加数据，并且每次只能添加一个 列表.extend([4,5,6,7,8]) 可迭代:集合 列表.insert(索引, 数据) 在指定位置插入数据(位置前有空元素会补位) 2 删除 del 列表[索引] 删除指定索引的数据 列表.remove(数据) 删除第一个出现的指定数据 列表.pop() 删除列表中的最后一个元素 有返回值，删除的元素 列表.pop(索引) 删除指定索引数据 列表.clear() 清空列表 3 修改 列表[索引] =数据 修改指定索引的数据，如果数据不存在，就报错 4 查询 列表[索引] 根据索引取值,如果索引不存在，就会报错 len(列表) 列表的长度 if 数据 in 列表 检查列表中是否包含某元素 5 排序 列表.sort() 升序排列 6、使用for的循环遍历列表遍历就是从头到尾依次取出每一个元素，并且执行相同的操作 python中实现遍历的方式很多，比如or循环等 python中为了提高列表中的遍历效率，专门提供了for循环实现遍历 7、列表的嵌套 一个列表中的元素又是一个列表，那么这就是列表的嵌套 city =[ [“朝阳区”,”海淀区”], [“浦东区”,”金山区”,”宝安区”] ] 案例： 一个学校，有3个办公室，现在有8位老师等待工位的分配 1234567import randomoffice=[[],[],[]]teacher=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;f&apos;,&apos;g&apos;,&apos;h&apos;,&apos;i&apos;]for name in teacher: index=random.randint(0,2) office[index].append(name)print(office) 8、应用场景 尽管 **Python** 的 列表 中可以 存储不同类型的数据 但是在开发中，更多的应用场景是 列表 存储相同类型的数据 通过 for**循环**，在循环体内部，针对列表中的每一项元素，执行相同的操作 (function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https'){ bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else{ bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s); })();]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>字典</tag>
        <tag>列表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[名片管理系统]]></title>
    <url>%2F%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html</url>
    <content type="text"><![CDATA[步骤：1、框架搭建2、新增名片3、显示所有名片4、查询名片5、查询成功后修改、删除名片6、让 Python 程序能够直接运行main.py12345678910111213141516171819main.py 一般写业务逻辑from tool import *while True: show_menu() operation=int(input(&quot;请输入您的操作：&quot;)) print(&quot;您选择的操作是：%s&quot;%operation) if operation==1: #添加名片操作 add_Info() elif operation ==2: # 显示全部操作 show_all() elif operation == 3: #查看名片操作 find_Info() elif operation == 0: #退出系统 print(&quot;退出系统&quot;) break else: print(&quot;输入错误，请重新输入&quot;) continue tool.py写要实现的功能，写函数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273Info_list=[] #存储输入的所有名片信息target_Info=&#123;&#125; #存储查找的名片信息def show_menu(): print(&quot;*&quot;*30) print(&quot; 欢迎使用名片管理系统 &quot;) print(&quot;1、添加名片 2、显示全部&quot;) print(&quot;3、查看名片 0、退出系统&quot;) print(&quot;*&quot;*30)def add_Info(): print(&quot;请根据提示添加信息：&quot;) names=input(&quot;请输入名字：&quot;) age=input(&quot;请输入年龄：&quot;) sex=input(&quot;请输入性别：&quot;) address=input(&quot;请输入住址：&quot;) Info_list.append(&#123;&quot;name&quot;:names,&quot;age&quot;:age,&quot;sex&quot;:sex,&quot;address&quot;:address&#125;) print(&quot;添加%s的信息成功&quot;%names) print(Info_list)def show_all(): print(&quot;显示所有名片信息&quot;) if len(Info_list)==0: print(&quot;当前信息系统中信息为空&quot;) show_title() for i in Info_list: print(&quot;%s\t\t%s\t\t%s\t\t%s&quot; %(i[&quot;name&quot;],i[&quot;age&quot;],i[&quot;sex&quot;],i[&quot;address&quot;])) print(&quot;-&quot;*30)def find_Info(): print(&quot;功能：查找要寻找的信息&quot;) if len(Info_list)&gt;0: find_name = input(&quot;请输入您要查找名片的名字：&quot;) for Info in Info_list: if find_name==Info[&quot;name&quot;]: print(&quot;找到了&quot;) show_title() print(&quot;%s\t\t%s\t\t%s\t\t%s&quot; % ( Info[&quot;name&quot;], Info[&quot;age&quot;], Info[&quot;sex&quot;], Info[&quot;address&quot;] )) global target_Info #使用的是全局的变量 target_Info = Info #查到的信息放入全局变量target_Info中 deal() break else: print(&quot;没有找到该信息！&quot;) else: print(&quot;列表中没有信息！&quot;)def show_title(): print(&quot;姓名\t\t电话\t\tqq\t\t邮箱&quot;) print(&quot;*&quot;*30)def deal(): while True: print(&quot;请选择你要对信息的操作：1、修改 2、删除、3、返回&quot;) choice=input() if choice == &apos;1&apos;: #修改信息 update() break elif choice == &apos;2&apos;: #删除信息 del_Info() #Info_list.remove(target_Info) print(&quot;删除成功&quot;) break elif choice == &apos;3&apos;: #返回 break else: print(&quot;选择错误，请重新选择&quot;)def update(): target_Info[&quot;name&quot;] = input(&quot;请输入姓名：&quot;) target_Info[&quot;age&quot;] = input(&quot;请输入年龄：&quot;) target_Info[&quot;sex&quot;] = input(&quot;请输入性别：&quot;) target_Info[&quot;address&quot;] = input(&quot;请输入住址：&quot;)def del_Info(): Info_list.remove(target_Info) (function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https'){ bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else{ bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s); })();]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>名片管理系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[变量和关键字]]></title>
    <url>%2F%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%B3%E9%94%AE%E5%AD%97.html</url>
    <content type="text"><![CDATA[1、变量（用了存储数据，找到数据）变量：在内存中开辟一块空间，起一个别名，用了访问和存储空间中的数据 变量的特点： 可以反复存储数据 可以反复取出数据 可以反复更改数据 2、变量的命名规则：1、开头是字母 或下划线 后面可以是字母 数字 下划线 _abc True 12abc 错误 False name#pass 特殊字符 2、不能以关键字名（关键字在python中有特殊的含有 def if else） 查看关键字用: 3、标识符和关键字 标识符 标示符就是程序员定义的 变量名、函数名 名字 需要有 见名知义 的效果，见下图： 标示符可以由 字母、下划线 和 数字 组成 不能以数字开头 不能与关键字重名 变量名要见名知义的效果 ![](https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/2.png) 一般在工作中命名规范 : 可以使用驼峰命名法 :小驼峰 （多个单词构成） 第一个单词小写，后面的单词首字母大写 oneTwoThree userName passWord 大驼峰 : 每个单词的首字母大写 OneTwoThree UserName 使用下划线命名法: 单词和单词之间用_ one_two_three user_name 4、 关键字 关键字 就是在 Python 内部已经使用的标识符 关键字 具有特殊的功能和含义 开发者 不允许定义和关键字相同的名字的标示符 通过以下命令可以查看 关键字： ![](https://raw.githubusercontent.com/voicezyxzyx/voicezyxzyx.github.io/master/images/3.png) 注意：变量名是区分大小写 5、变量的创建(重点)在python中，每一个变量在使用前都必须赋值，变量赋值后，变量就创建了 变量名 = 值 等号(=) 用了给变量赋值 = 左边是变量名 = 右边的是用来存储变量的值 变量演练1 定义两个变量，分别用来存储用户名和密码， 并且输出用户名和密码 定义一个淘宝的账号tb_user = “gongfuxong”# 定义一个淘宝的密码tb_password = “123345”# 输出变量的值用 print()print(tb_user)print(tb_password) 变量的演练2超市买苹果 需求 苹果的价格是 8.5 元/斤 price 买了 7.5 斤 苹果 weight 计算付款金额 输出金额 # 定义苹果的价格price = 5.5# 定义苹果的重量weight = 2# 计算苹果总共的金额money = price * weight# 输出结果print(money） 6、变量的类型在程序中，为了更好的区分变量的功能和更有效的管理内存，变量也分为不同的类型 变量的数据类型是由值决定的 变量的数据类型，根据 =右边的值推导出来的 1、变量的数据类型的分类 变量的数据类型分为 数字型 和非数字型 数字型 整型（int） :输入的是整数 例如: age =20 Price = 9 int Weight =50 int 浮点型(float) : 输入的是 小数 例如 height= 1.75 Weight = 90.88 float Height = 1.99 float 布尔型（bool） 有两个值 True(真) 是1 ,False（假） 是0 例如 marry = True 或 result = 5&gt;6 “5”+”6” 比较运算返回的是布尔型 测试数据类型type(变量) 非数字型 字符串str：用双引号或单引号括起来的是**字符串** 列表list 元组tuple 字典dict 7、测试变量的数据类型 用type(**变量**) 测试变量的数据类型 N1= 20 int N2= 20.444 float N3= “你好” str N4=True bool N5=False bool print(type(N1)) print(type(N2)) …… (function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https'){ bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else{ bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s); })();]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>变量</tag>
        <tag>关键字</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python--while循环、for循环]]></title>
    <url>%2Fwhile%E5%BE%AA%E7%8E%AF%E3%80%81for%E5%BE%AA%E7%8E%AF.html</url>
    <content type="text"><![CDATA[1、while循环while 循环的基本格式 1、变量的初始化 while 条件2: 条件满足时候:执行该代码 条件满足时候:执行该代码 **3****变量的更新** 2、while 循环的应用1、while循环输出while循环输出20次我爱你 2、while循环输出1-100累加和# 1-100之间所有数的和# 1变量的初始化i = 0sum = 0 #存储和# 判断条件while i &lt;= 100: sum += i # sum = sum +i 求和 # 变量的更新 i += 1 print(sum) 3、输出1-100之间偶数的和 # 1-100之间偶数的和# 1变量的初始化i = 0sum = 0 #存储和# 判断条件while i &lt;= 100: if i % 2 == 0: # 是否是偶数 sum += i # sum = sum +i 求和 # 变量的更新 i += 1 print(“1-100之间所有偶数的和%s”%sum) 3、while循环嵌套(了解)while嵌套的 while里面还有while While 执行一次 ,里面多次 While嵌套的基本的格式（了解） while 条件1 条件1满足时,执行该代码 条件1满足时,执行该代码 while 条件2： 条件2满足时，执行该代码 外部的while 循环一次，里面的while循环多次 外边的while 循环一次，里面的while循环多次 1、使用while循环打印三角形的练习 第一行 1 星星的个数 行数是一样 第二行 2 第三行 3 第四行 4 第五行 5 用一个while 也可以实现 2、九九乘法表1 * 1 = 1 1 2 = 2 2 2 =4 1 3 =3 2 3 =6 3 * 3 =9 前面的数 星星的个数 * 行数 = 注意：外层执行一遍，内层执行多次 4、for循环像while循环一样，for可以完成循环功能 python中可以用for循环遍历任何系列的项目,如果一个列表或一个字符串 for 循环的基本格式For 变量 in 数据 代码 12for i in range(0,11): print(i,end=&quot; &quot;) 5、扩展range(start,stop) 函数可创建一个整数int列表，一般用在 for 循环中。 start: 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5） stop: 计数到 stop 结束，但不包括 stop。例如：range（0， 5）是[0, 1, 2, 3, 4]没有 例如： range(5) ====range(0,5) ===0,1,2,3,4 range(3,9) 3 4 5 6 7 8 range(1,100) 1 2 3 4…99 6、break 和continue作用注意：break continue 结合 条件判断 满足一定的条件，退出 break 退出的是相关的所有的循环 Continue 退出是当前的循环，进入下一次循环 (function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https'){ bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else{ bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s); })();]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>while循环</tag>
        <tag>for循环</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pycharm联网不能登陆的激活问题]]></title>
    <url>%2Fpycharm%E8%81%94%E7%BD%91%E4%B8%8D%E8%83%BD%E7%99%BB%E9%99%86%E7%9A%84%E6%BF%80%E6%B4%BB%E9%97%AE%E9%A2%98.html</url>
    <content type="text"><![CDATA[windows进入C:\Windows\System32\drivers\etc，找到hosts文件，复制一份到桌面，然后进行编辑，将下面的内容粘贴到最后，并保存，然后把文件放回源目录，替换之前的文件。 0.0.0.0 account.jetbrains.com 然后重新激活对应的pycharm即可。 Linux输入下面的命令， sudo vi /etc/hosts 打开host文件，打开之后，将 0.0.0.0 account.jetbrains.com 粘贴到最后，并保存， 然后重新激活对应的pycharm即可。 (function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https'){ bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else{ bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s); })();]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>pycharm</tag>
        <tag>pycharm激活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pycharm连接mysql，navicat破解工具]]></title>
    <url>%2Fpycharm%E8%BF%9E%E6%8E%A5mysql%EF%BC%8Cnavicat%E7%A0%B4%E8%A7%A3%E5%B7%A5%E5%85%B7.html</url>
    <content type="text"><![CDATA[Pycharm连接mysql 1、 下载安装pycharm 2、 可以到官网下载，我用的是2017版，链接在下边，可以自行下载安装。 链接：https://pan.baidu.com/s/178GGasShAleTF2RtS8jDiw 密码：2ujf 3、 安装mysql和navicat Premium（数据库管理工具） 下载navicat后，总会提示试用期14天，可以用下边分享的软件进行破解，下载完解压直接运行就好。 链接：https://pan.baidu.com/s/1gR4fXmRg3Wwf2AMJiamlTA 密码：1xzd 4、 安装mysql时，没什么特别需要注意的，端口一般就选默认的3306就好，账户名字和密码需要记好。 5、 安装完navicat后，打开，连接mysql，点击连接，选择mysql。 然后会出现新建连接的设置，连接名可以自己起，用户名和密码和刚才mysql设置的一样。 设置完以后，打开mysql，然后在navicat中双击刚才创建的连接，绿色显示就表示已经连接成功了。 6、pycharm里设置 看你的pycharm中是否有Database Navigator插件。 如果没有的话，在上边搜索，然后安装插件，然后点击应用。 然后看pycharm界面，是否出现Database相关的按键，我的在最左边一列，点击后出现如下界面： 然后点击setting进行端口，用户，密码设置。设置完以后点击test connection，检测是否可用连接成功。 连接成功后也会看到刚才数据库里建的两个表。 (function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https'){ bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else{ bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s); })();]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>navicat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB基本操作]]></title>
    <url>%2FMongoDB%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html</url>
    <content type="text"><![CDATA[一、操作MongoDB数据库1、创建数据库语法：use 数据库名 注意：如果数据库不存在，则创建，否则切换到该数据库 如果刚才创建的数据库不在列表内，如果要显示刚创建的数据库，我们需要向刚创建的数据库插入一些数据 (db.student.insert({name:&quot;tom&quot;,age:18,gender:1,address：&quot;北京&quot;,isDelete:0})) 2、删除数据库前提：必须正在使用要删除的数据库 db.dropDatabase() 3、查看所有数据show dbs 4、查看当前正在使用的数据库db db.getName() 5、断开连接exit 6、查看命令API：help 二、集合操作1、查看当前数据库下有哪些集合show collections 2、创建集合a、 语法：db.createCollection(&quot;集合名&quot;) 示例：db.createCollection(&quot;class&quot;) b、 语法：db.集合名.insert(document) 示例：db.student.insert({name:&quot;tom&quot;,age:18,gender:1,address：&quot;北京&quot;,isDelete:0}) 区别：前者创建的是一个空的集合，后者创建一个空的集合并添加一个文档 3、删除当前数据库中的集合语法：db.集合名.drop() 三、文档操作1、插入文档1、使用insert()方法插入文档语法：db.集合名.insert(文档) 插入一个： 示例：db.student.insert({name:&quot;jack&quot;,age:18,gender:1,address：&quot;北京&quot;,isDelete:0}) 插入多条：db.集合名.insert([文档1,文档2]) 示例：db.student.insert([{name:&quot;z&quot;,age:17,gender:0,address:&quot;杭州&quot;,isDelete:0},{name:&quot;zz&quot;,age:25,gender:0,address:&quot;上海&quot;,isDelete:0}]) 2、使用save()方法插入文档语法：db.集合名.save(文档) 注意：如果不指定_id字段，save()方法类似于insert()方法，如果指定_id字段，则会更新_id字段的数据 没有指定_id字段（和insert方法效果一样）：db.student.insert({name:&quot;jack&quot;,age:18,gender:1,address：&quot;北京&quot;,isDelete:0}) 指定_id字段： db.student.save({_id:ObjectId(&quot;5b753350178db1d794e3f06f&quot;),&quot;name&quot;:&quot;tom&quot;,&quot;age&quot;:23,&quot;gender&quot;:1.0,&quot;address&quot;:&quot;上海&quot;,&quot;isDelete&quot;:0.0}) 2、文档更新1、update()方法 用于更新以存在的文档 语法：db.集合名.update( query, update, { upset:&lt;boolean&gt;, multi:&lt;boolean&gt;, writeConcern:&lt;document&gt; } ) 参数说明： query:update的查询条件，类似于sql里的update语句内where后面的内容 update:update的对象和一些更新的操作符($set,$inc等)，$set:直接更新 $inc:在原有基础上累加后更新 upset:可选，如果不存在update的记录，是否当新数据插入，true 为插入，False 为不插入，默认为不插入 multi:可选，mongodb默认是false，只更新找到的第一条记录，如果这个参数为true，就按照条件查找出来的数据全部更新。 writeConcern:可选，抛出异常的级别， 示例： db.student.update({name:&quot;jack&quot;},{$set:{age:25}}) ​ 如果想让匹配到的内容全部修改： db.student.update({name:”jack”},{$set:{age:25}}，{multi:true}) 2、save()方法 用过传入的文档替换原来的文档语法：db.集合名.save(document,{writeConcern:&lt;document&gt;}) 参数说明：document：文档数据 writeConcern:可选，抛出异常的级别 3、文档删除在执行remove()函数前，先执行find()命令来判断执行的条件是否存在 语法: db.集合名.remove(query,{justOne:&lt;boolean&gt;,writeConcern:&lt;document&gt;}) 参数说明：query:可选，删除的文档的条件 justOne:可选，如果为true或1，则只删除一个文档 示例：db.student.remove({name:&quot;tom&quot;}) 4、文档查询1、find()方法 查询集合下所有文档db.集合名.find() 2、find()方法 查询指定列db.集合名.find(query,{&lt;key&gt;:1,&lt;key&gt;:1}) 示例：db.student.find({gender:1.0},{name:1,age:1}) 参数说明：query:查询条件 可以不写查询条件（即全查） key: 1 表示显示 3、pretty()方法 以格式化的方式来显示文档db.student.find().pretty() 4、findOne()方法 查询匹配结果的第一条语句db.student.findOne({gender:0}) 5、查询条件操作符：作用：条件操作符用于比较两个表达式并从mongodb集合中获取数据 1、大于： $gt 语法: db.集合名.find({:{$gt:}}) 示例：db.student.find({age:{$gt:19}}) 2、大于等于： $gte 语法: db.集合名.find({:{$gte:}}) 3、小于： $lt 语法: db.集合名.find({:{$lt:}}) 4、小于等于： $lte 语法: db.集合名.find({:{$lte:}}) 5、大于等于 和 小于等于： $gt 和 $lte 语法: db.集合名.find({:{$gte:,$lte:}}) 6、等于： ： 7、使用_id进行查询 语法：db.集合名.find({“_id”:ObjectId(“id值”)}) 8、查询某个结果集的数据条数 db.集合名.find().count() 9、查询否个字段的值当中是否包含另一个值 示例：db.集合名.find(name:/ile/) 查询集合中名字是否有包含‘ile’字符的 10、查询某个字段的值是否以另一个值开头 示例：db.集合名.find(name:/^li/) 查询集合中名字是否有以‘li’字符开头的 6、条件查询and 和 or1、and条件语法：db.集合名.find({条件1，条件2，......条件n}) 2、or条件语法：db.集合名.find({$or:[{条件1}，{条件2}，......{条件n}]}) 示例：db.student.find({$or:[{age:17},{age:{$gte:19}}]}) 查找年龄为17 或者 年龄的大于19的 3、and和or联合使用语法：db.集合名.find({条件1，条件2，$or:[{条件3，条件4}]}) 7、limit、skip1、limit()方法：读取指定数量的数据记录示例：db.集合名.find().limit(2) 查看集合里的两条数据 2、skip()方法：跳过指定数量的数据示例：db.集合名.find().skip(2) 跳过两条数据读取下边的其他数据 3、limit与skip联合使用通常用这种方式来实现分页功能 示例：db.集合名.find().skip(2).limit(2) 越过两条数据在取两条数据 8、排序语法：db.集合名.find().sort({&lt;key&gt;:1|-1}) 1 表示升序 -1表示降序 示例：db.集合名.find().sort({age:1}) 按年龄升序排 (function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https'){ bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else{ bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s); })();]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 博客部署在github和coding上 同时推送到两个仓库]]></title>
    <url>%2FHexo%20github%20coding.html</url>
    <content type="text"><![CDATA[1、注册coding账号2、新建项目不选择 启用 README.md 文件初始化项目，以及任何 License 和 .gitignore 文件。 3、从github上克隆项目下来 在本地git终端执行： git clone https://github.com/xxxxxx/xxxxxx.git --bare （xxxxxx表示你自己用户名和仓库名） 4、将克隆下来的仓库推送到 CODING克隆完成后，将仓库推送到 CODING 上。使用仓库页面提供的 URL。 在本地创一个coding存放文件的地方（文件夹） 在此处打开终端： git push https://git.coding.net/xxxxxx/xxxxx.git --all （此处第一个xxxxx表示自己的coding用户名，第二个xxxxx表示自己的仓库名） 完成后，再执行 推送所有的标签。 git push https://git.coding.net/xxxxxx/xxxxx.git --tags 这样，整个仓库就全部导入到 CODING 中了。 5、coding部署公钥如果是第一次使用coding的话，需要设置SSH公钥，生成的方法可以参考coding帮助中心，我这里直接使用之前部署github时已经生成的公钥。 打开coding，进入刚才创建的项目，选择设置，部署公钥，把id_rsa里的内容全部复制粘贴到新建公钥里，标题可以不写。 添加成功后如下图： 6、检测是否添加成功添加后，在git bash命令输入： 1ssh -T git@git.coding.net 如果得到下面提示就表示公钥添加成功了： 1Coding.net Tips : [Hello ! You&apos;ve conected to Coding.net by SSH successfully! ] 7、同时部署到2个平台想要发送文章同时推送到两个仓库中，就要修改博客根目录下面的_config.yml文件中的deploy如下 根据Hexo官方文档需要修改成下面的形式： （冒号后面需要有一个空格） 8、coding上的Pages服务分支选择master，因为前面配置的分支是master,因此开启之后，也需要是master。 如果有自己的域名，可以绑定新的域名 绑定前请在域名 DNS 设置中添加一条 CNAME 记录指向 xxxxxx.coding.me 这样配置结束后，如果没有问题就可以通过访问自己的域名访问了。 通过gitbash推送文章也会推送到两个仓库中。 9、推送文章推送文章前 hexo g hexo d 我的需要输入两次密码 即上传github一次，上传coding一次 最后成功结果如下： (function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https'){ bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else{ bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s); })();]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django从头学----学习笔记4]]></title>
    <url>%2FDjango%E4%BB%8E%E5%A4%B4%E5%AD%A6----%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04.html</url>
    <content type="text"><![CDATA[1、Django与数据库Django为各种数据库提供了很好的支持，为这些数据库提供了统一的API，可以根据不同的需求选择不同的数据库。 2、配置数据库：（如mysql）在项目目录下的init.py文件中，添加 12import pymysqlpymysql.install_as_MySQLdb() 然后修改settings.py文件中的DATABASES为： 12345678910DATABASES = &#123; 'default': &#123; 'ENGINE': 'django.db.backends.mysql', 'NAME': 'django', #数据库名字 'USER':'root', #用户名 'PASSWORD':'123456', #密码 'HOST':'localhost', 'PORT':'3306', &#125;&#125; 3、ORM对象–关系–映射（极大的减轻了工作量，不需要因为数据库的变更而修改代码） 对象关系映射（Object Relational Mapping，简称ORM）模式是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。 ORM的任务是： 1、根据对象的类型生成表结构。2、将对象、列表的操作转换为sql语句。3、将sql语句查询到的结果转化为对象、列表。 4、定义模型模型、属性、表、字段间的关系：一个模型类在数据库中对应一张表，在模型类中定义的属性，对应该模型对照表中的一个字段。 创建模型类 在models.py文件中添加 12345678910111213141516171819202122from django.db import models# Create your models here.class Grades(models.Model): gname = models.CharField(max_length=20) gdate = models.DateTimeField() ggirlnum = models.IntegerField() gboynum = models.IntegerField() isDelete = models.BooleanField() def __str__(self): return self.gnameclass Students(models.Model): sname=models.CharField(max_length=20) sgender=models.BooleanField(default=True) sage=models.IntegerField(db_column='age') scontend=models.CharField(max_length=20) isDelete=models.BooleanField(default=False) #设置关联外键 sgrade=models.ForeignKey('Grades') def __str__(self): return self.sname lasttime=models.DateTimeField(auto_now=True) createTime=models.DateTimeField(auto_now=True) 5、元选项：在模型类中定义Meta类，用于设置元信息。 然后在终端执行python manage.py makemigrations 生成迁移文件，然后执行python manage.py migrate 执行迁移。 可以看到数据库中的表名被修改成我们自己定义的表名了，myapp_grades没有自己定义就默认命名了。 6、模型成员类属性：objects是Manager类型的一个对象，作用是与数据库进行交互。当定义模型类是没有指定管理器，则Django为模型创建一个名为objects的管理器。 自定义管理器Manager类：模型管理器是Django的模型进行与数据库进项交互的接口，一个模型可以有多个模型管理器。 作用：向管理器类中添加额外的方法、修改管理器返回的原始查询集（重写get_quertset()方法） 123class StudentsManager(models.Manager): def get_queryset(self): return super(StudentsManager,self).get_queryset().filter(isDelete=False) 创建对象：（有两种方法） 方法1：在模型类中添加一个类方法 方法2：在定义管理器中添加一个类方法 7、模型查询查询集表示从数据库获取的对象集合。查询集可以有多个过滤器，过滤器就是一个函数，基于所给的参数限制查询的结果。 返回单个数据get（）：返回一个满足条件的对象。如果没有找到符合条件的模型对象，会引发“模型类.DoesNotExist异常”，如果找到多个对象，也会引发“模型类.MutipleObjectReturned异常” count（）：返回查询集中的对象个数 first（）：返回查询集中的第一个对象 last（）：返回查询集中的最后一个对象 exists（）：返回查询集中事都有数据，如果有返回True 限制查询集查询返回集列表，可以使用下标的方法进行限制，等同于sql语句中的limit语句。 例：list=Students.objects.all()[0:5] #显示前5条学生的信息 （注意下标不能为负数） 字段查询实现了sql中的where语句，作为方法filter（）、exclude（）、get（）的参数 语法：属性名称__比较运算符=值 外键：属性名_id 比较运算符exact：判断大小写，对大小写敏感 语法：filter（isDelete=False） contains：判断是否包含，对大小写敏感。 语法：studentsList=Students.objects.filter(sname__contasins=’张’) startswith、endswith：判断是否以value开头、结尾，对大小写敏感 语法：studentsList=Students.objects.filter(sname__startswith=’张’) 前边四个运算符，在前边加上i，就不区分大小写了。 isnul、isnotnul：判断是否为空。 in:判断是否包含在范围内。 语法：studentsList=Students.objects.filter(pk__in=[2,4,6,8,10]) gt：大于 gte：大于等于 lt：小于 lte：小于等于 语法：studentsList=Students.objects.filter(sage__gt=20) 查找年龄大于20岁的信息。 (function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https') { bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else { bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s); })();]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django从头学----学习笔记3]]></title>
    <url>%2FDjango%E4%BB%8E%E5%A4%B4%E5%AD%A6----%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03.html</url>
    <content type="text"><![CDATA[1、视图的基本视图对web请求进行回应 视图就是一个python的函数在views.py中定义 定义视图：在views.py文件中添加 12345from django.http import HttpResponsedef index(request): return HttpResponse(&apos;hello world&apos;) 2、配置url修改project目录下的urls.py文件， 1234567891011from django.conf.urls import url,includefrom django.contrib import adminurlpatterns = [ url(r&apos;^admin/&apos;, admin.site.urls), url(r&apos;^&apos;,include(&apos;myApp.urls&apos;)), #站点后什么都不输入，匹配到myApp.urls.py文件下的url] 在myApp应用目录下创建一个urls.py文件 123456789from django.conf.urls import urlfrom . import viewsurlpatterns = [ url(r&apos;^$&apos;,views.index), #刚才站点后什么都不输入，匹配到这里，然后在调用视图views下的index函数，然后会在站点上显示出来我们需要服务器返回的内容] 3、模板的基本模板是HTML页面，可以根据视图中传递过来的数据进行填充。 创建模板：在大项目中创建一个templates文件夹，和myApp、project同级，然后在目录下创建对应项目的模板目录（project/templates/myApp） 配置路径： 修改settings.py文件下的TEMPLATES, 12345TEMPLATES = [ &#123; &apos;BACKEND&apos;: &apos;django.template.backends.django.DjangoTemplates&apos;, &apos;DIRS&apos;: [os.path.join(BASE_DIR,&apos;templates&apos;)], &apos;APP_DIRS&apos;: True, 在刚才创建的模板文件夹下创建grades.html和students.html文件。 4、例：使通过在站点输入localhost:8000/grades 可以查出班级的视图编写grades.html文件： 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;班级信息&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;班级信息列表&lt;/h1&gt; &lt;ul&gt; &#123;%for grade in grades%&#125; &lt;li&gt; &lt;a href="#"&gt;&#123;&#123;grade.gname&#125;&#125;&lt;/a&gt; &lt;/li&gt; &#123;%endfor%&#125; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 定义视图：在views.py文件下定义一个grades函数 123456from .models import Grades,Studentsdef grades(request): #去模板里取数据 gradesList=Grades.objects.all() #将数据传递给模板，模板再渲染页面，将渲染好的额页面返回给浏览器 return render(request,'myApp/grades.html',&#123;'grades':gradesList&#125;) 配置url，在myApp\urls.py文件下添加url正则匹配式： 123456from django.conf.urls import urlfrom . import viewsurlpatterns = [ url(r'^$',views.index), url(r'^(\d+)/$',views.detail), #匹配端口后输入数字时的情况。 url(r'^grades/$',views.grades) #匹配端口后输入grades（班级）时的情况。 这样就可以看到如下情况： (function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https') { bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else { bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s); })();]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django从头学----学习笔记2]]></title>
    <url>%2FDjango%E4%BB%8E%E5%A4%B4%E5%AD%A6----%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02.html</url>
    <content type="text"><![CDATA[1、查看某个对象类名.objects.all() 查询全部 类名.objects.get(pk=2) 括号里表示条件 2、修改数据模型对象.属性=新的值 例：grade2.gboynum=60 grade2.save() #只有执行save（）才会修改数据库里的数据 3、删除数据模型对象.delete() 例：grade2.delete() 执行完这句，为物理删除，数据库中的表中的数据就直接删除了 4、关联对象grade1=Grades.objects.get(pk=1) stu=Students() stu.sname=’zyx’ stu.sgender=False stu.sage=20 stu.scontend=’my name is zyx’ stu.sgrade=grade1 获得关联对象的集合： 对象名.关联的类名_set.all() 5、启动服务器格式：python manage.py runserver ip:port (ip可以不写，不写代表本地ip；端口号默认是8000) 这是一个python写的轻量级web服务器，仅在开发测试中使用。 在网页输入localhost：8000 可以看到界面没有报错 即服务器启动成功 6、Admin站点管理内容发布：负责添加、修改、删除内容 配置Admin应用在settings.py文件中的INSTALLEN_APPS中添加’django.contrib.admin’，默认是添加过的。 设置管理员账号和密码在终端输入：python manage.py creatsuperuser 根据提示输入用户名、邮箱、密码 在浏览器输入：http://localhost:8000/admin/ 进入管理员界面 管理数据表修改admin.py文件 1234from .models import Grades,Students#注册admin.site.register(Grades)admin.site.register(Students) 这样可以在浏览器看到如下情况： 列表页属性 站点情况： 修改页属性 站点情况： 注意：fields 与fieldsets 不可以同时使用！！！ (function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https') { bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else { bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s); })();]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
</search>
